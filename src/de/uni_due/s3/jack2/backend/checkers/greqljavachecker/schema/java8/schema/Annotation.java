/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Annotation extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression, de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Java8Schema.instance().getGraphClass().getVertexClass("Annotation");

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation getNextAnnotation();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element getNextElement();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression getNextExpression();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node getNextNode();

	/**
	 * @return the first edge of class VariableDeclarationExpressionAnnotation at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionAnnotation getFirstVariableDeclarationExpressionAnnotationIncidence();

	/**
	 * @return the first edge of class VariableDeclarationExpressionAnnotation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionAnnotation getFirstVariableDeclarationExpressionAnnotationIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SimpleTypeAnnotation at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeAnnotation getFirstSimpleTypeAnnotationIncidence();

	/**
	 * @return the first edge of class SimpleTypeAnnotation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeAnnotation getFirstSimpleTypeAnnotationIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AnnotationTypeMemberDeclarationAnnotations at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationAnnotations getFirstAnnotationTypeMemberDeclarationAnnotationsIncidence();

	/**
	 * @return the first edge of class AnnotationTypeMemberDeclarationAnnotations at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationAnnotations getFirstAnnotationTypeMemberDeclarationAnnotationsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class DimensionAnnotations at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DimensionAnnotations getFirstDimensionAnnotationsIncidence();

	/**
	 * @return the first edge of class DimensionAnnotations at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DimensionAnnotations getFirstDimensionAnnotationsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class InitializerAnnotation at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerAnnotation getFirstInitializerAnnotationIncidence();

	/**
	 * @return the first edge of class InitializerAnnotation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerAnnotation getFirstInitializerAnnotationIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodDeclarationAnnotation at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationAnnotation getFirstMethodDeclarationAnnotationIncidence();

	/**
	 * @return the first edge of class MethodDeclarationAnnotation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationAnnotation getFirstMethodDeclarationAnnotationIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AnnotationTypeDeclarationAnnotations at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationAnnotations getFirstAnnotationTypeDeclarationAnnotationsIncidence();

	/**
	 * @return the first edge of class AnnotationTypeDeclarationAnnotations at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationAnnotations getFirstAnnotationTypeDeclarationAnnotationsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SingleVariableDeclarationVarargsAnnotations at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationVarargsAnnotations getFirstSingleVariableDeclarationVarargsAnnotationsIncidence();

	/**
	 * @return the first edge of class SingleVariableDeclarationVarargsAnnotations at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationVarargsAnnotations getFirstSingleVariableDeclarationVarargsAnnotationsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SingleVariableDeclarationAnnotation at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationAnnotation getFirstSingleVariableDeclarationAnnotationIncidence();

	/**
	 * @return the first edge of class SingleVariableDeclarationAnnotation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationAnnotation getFirstSingleVariableDeclarationAnnotationIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class EnumDeclarationAnnotations at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationAnnotations getFirstEnumDeclarationAnnotationsIncidence();

	/**
	 * @return the first edge of class EnumDeclarationAnnotations at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationAnnotations getFirstEnumDeclarationAnnotationsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class FieldDeclarationAnnotation at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationAnnotation getFirstFieldDeclarationAnnotationIncidence();

	/**
	 * @return the first edge of class FieldDeclarationAnnotation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationAnnotation getFirstFieldDeclarationAnnotationIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class EnumConstantDeclarationAnnotations at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnnotations getFirstEnumConstantDeclarationAnnotationsIncidence();

	/**
	 * @return the first edge of class EnumConstantDeclarationAnnotations at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnnotations getFirstEnumConstantDeclarationAnnotationsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class TypeDeclarationAnnotation at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationAnnotation getFirstTypeDeclarationAnnotationIncidence();

	/**
	 * @return the first edge of class TypeDeclarationAnnotation at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationAnnotation getFirstTypeDeclarationAnnotationIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>access2</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2 add_access2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration vertex);
		/**
		 * removes all access2 adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> remove_access2();
		/**
		 * removes the given vertex as <code>access2</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_access2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'access2'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> Iterable<V> get_access2();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> Iterable<V> get_access2(de.uni_koblenz.jgralab.VertexFilter<V> filter);
		/**
		 * adds the given vertex as <code>expression</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression add_expression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex);
		/**
		 * removes all expression adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> remove_expression();
		/**
		 * removes the given vertex as <code>expression</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_expression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'expression'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> Iterable<V> get_expression();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> Iterable<V> get_expression(de.uni_koblenz.jgralab.VertexFilter<V> filter);
		/**
		 * adds the given vertex as <code>access1</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1 add_access1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration vertex);
		/**
		 * removes all access1 adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> remove_access1();
		/**
		 * removes the given vertex as <code>access1</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_access1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'access1'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> Iterable<V> get_access1();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> Iterable<V> get_access1(de.uni_koblenz.jgralab.VertexFilter<V> filter);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type VariableDeclarationExpressionAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionAnnotation> getVariableDeclarationExpressionAnnotationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type VariableDeclarationExpressionAnnotation.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionAnnotation> getVariableDeclarationExpressionAnnotationIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SimpleTypeAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeAnnotation> getSimpleTypeAnnotationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SimpleTypeAnnotation.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeAnnotation> getSimpleTypeAnnotationIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeMemberDeclarationAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationAnnotations> getAnnotationTypeMemberDeclarationAnnotationsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeMemberDeclarationAnnotations.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationAnnotations> getAnnotationTypeMemberDeclarationAnnotationsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type DimensionAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DimensionAnnotations> getDimensionAnnotationsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type DimensionAnnotations.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DimensionAnnotations> getDimensionAnnotationsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InitializerAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerAnnotation> getInitializerAnnotationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InitializerAnnotation.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerAnnotation> getInitializerAnnotationIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationAnnotation> getMethodDeclarationAnnotationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationAnnotation.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationAnnotation> getMethodDeclarationAnnotationIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeDeclarationAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationAnnotations> getAnnotationTypeDeclarationAnnotationsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeDeclarationAnnotations.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationAnnotations> getAnnotationTypeDeclarationAnnotationsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleVariableDeclarationVarargsAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationVarargsAnnotations> getSingleVariableDeclarationVarargsAnnotationsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleVariableDeclarationVarargsAnnotations.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationVarargsAnnotations> getSingleVariableDeclarationVarargsAnnotationsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleVariableDeclarationAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationAnnotation> getSingleVariableDeclarationAnnotationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleVariableDeclarationAnnotation.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationAnnotation> getSingleVariableDeclarationAnnotationIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumDeclarationAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationAnnotations> getEnumDeclarationAnnotationsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumDeclarationAnnotations.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationAnnotations> getEnumDeclarationAnnotationsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FieldDeclarationAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationAnnotation> getFieldDeclarationAnnotationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FieldDeclarationAnnotation.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationAnnotation> getFieldDeclarationAnnotationIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumConstantDeclarationAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnnotations> getEnumConstantDeclarationAnnotationsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumConstantDeclarationAnnotations.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnnotations> getEnumConstantDeclarationAnnotationsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeDeclarationAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationAnnotation> getTypeDeclarationAnnotationIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeDeclarationAnnotation.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationAnnotation> getTypeDeclarationAnnotationIncidences(EdgeDirection direction);
}
