/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface SimpleName extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name, de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Java8Schema.instance().getGraphClass().getVertexClass("SimpleName");

	public java.lang.String get_name();

	public void set_name(java.lang.String _name);

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element getNextElement();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression getNextExpression();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name getNextName();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node getNextNode();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName getNextSimpleName();

	/**
	 * @return the first edge of class EnumConstantDeclarationName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationName getFirstEnumConstantDeclarationNameIncidence();

	/**
	 * @return the first edge of class EnumConstantDeclarationName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationName getFirstEnumConstantDeclarationNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodRefName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefName getFirstMethodRefNameIncidence();

	/**
	 * @return the first edge of class MethodRefName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefName getFirstMethodRefNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AnnotationTypeDeclarationName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationName getFirstAnnotationTypeDeclarationNameIncidence();

	/**
	 * @return the first edge of class AnnotationTypeDeclarationName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationName getFirstAnnotationTypeDeclarationNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SingleMemberAnnotationTypeName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationTypeName getFirstSingleMemberAnnotationTypeNameIncidence();

	/**
	 * @return the first edge of class SingleMemberAnnotationTypeName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationTypeName getFirstSingleMemberAnnotationTypeNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ExpressionMethodReferenceName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceName getFirstExpressionMethodReferenceNameIncidence();

	/**
	 * @return the first edge of class ExpressionMethodReferenceName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceName getFirstExpressionMethodReferenceNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AnnotationTypeMemberDeclarationName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationName getFirstAnnotationTypeMemberDeclarationNameIncidence();

	/**
	 * @return the first edge of class AnnotationTypeMemberDeclarationName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationName getFirstAnnotationTypeMemberDeclarationNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MarkerAnnotationTypeName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotationTypeName getFirstMarkerAnnotationTypeNameIncidence();

	/**
	 * @return the first edge of class MarkerAnnotationTypeName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotationTypeName getFirstMarkerAnnotationTypeNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class FieldAccessName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccessName getFirstFieldAccessNameIncidence();

	/**
	 * @return the first edge of class FieldAccessName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccessName getFirstFieldAccessNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodDeclarationReceiverQualifier at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverQualifier getFirstMethodDeclarationReceiverQualifierIncidence();

	/**
	 * @return the first edge of class MethodDeclarationReceiverQualifier at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverQualifier getFirstMethodDeclarationReceiverQualifierIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class QualifiedNameName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameName getFirstQualifiedNameNameIncidence();

	/**
	 * @return the first edge of class QualifiedNameName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameName getFirstQualifiedNameNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MemberValuePairName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairName getFirstMemberValuePairNameIncidence();

	/**
	 * @return the first edge of class MemberValuePairName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairName getFirstMemberValuePairNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodRefParameterName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterName getFirstMethodRefParameterNameIncidence();

	/**
	 * @return the first edge of class MethodRefParameterName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterName getFirstMethodRefParameterNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SuperFieldAccessName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessName getFirstSuperFieldAccessNameIncidence();

	/**
	 * @return the first edge of class SuperFieldAccessName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessName getFirstSuperFieldAccessNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class LabeledStatementLabel at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementLabel getFirstLabeledStatementLabelIncidence();

	/**
	 * @return the first edge of class LabeledStatementLabel at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementLabel getFirstLabeledStatementLabelIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class PostfixExpressionOperand at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpressionOperand getFirstPostfixExpressionOperandIncidence();

	/**
	 * @return the first edge of class PostfixExpressionOperand at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpressionOperand getFirstPostfixExpressionOperandIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MemberRefName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefName getFirstMemberRefNameIncidence();

	/**
	 * @return the first edge of class MemberRefName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefName getFirstMemberRefNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class EnumDeclarationName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationName getFirstEnumDeclarationNameIncidence();

	/**
	 * @return the first edge of class EnumDeclarationName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationName getFirstEnumDeclarationNameIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SimpleNameValues at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues getFirstSimpleNameValuesIncidence();

	/**
	 * @return the first edge of class SimpleNameValues at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues getFirstSimpleNameValuesIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class TypeParameterName at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterName getFirstTypeParameterNameIncidence();

	/**
	 * @return the first edge of class TypeParameterName at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterName getFirstTypeParameterNameIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>access2</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2 add_access2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration vertex);
		/**
		 * removes all access2 adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> remove_access2();
		/**
		 * removes the given vertex as <code>access2</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_access2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'access2'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> Iterable<V> get_access2();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> Iterable<V> get_access2(de.uni_koblenz.jgralab.VertexFilter<V> filter);
		/**
		 * adds the given vertex as <code>values</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues add_values(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration vertex);
		/**
		 * removes all values adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration> remove_values();
		/**
		 * removes the given vertex as <code>values</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_values(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'values'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration> Iterable<V> get_values();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration> Iterable<V> get_values(de.uni_koblenz.jgralab.VertexFilter<V> filter);
		/**
		 * adds the given vertex as <code>expression</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression add_expression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex);
		/**
		 * removes all expression adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> remove_expression();
		/**
		 * removes the given vertex as <code>expression</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_expression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'expression'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> Iterable<V> get_expression();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> Iterable<V> get_expression(de.uni_koblenz.jgralab.VertexFilter<V> filter);
		/**
		 * adds the given vertex as <code>access1</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1 add_access1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration vertex);
		/**
		 * removes all access1 adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> remove_access1();
		/**
		 * removes the given vertex as <code>access1</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_access1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'access1'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> Iterable<V> get_access1();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> Iterable<V> get_access1(de.uni_koblenz.jgralab.VertexFilter<V> filter);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumConstantDeclarationName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationName> getEnumConstantDeclarationNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumConstantDeclarationName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationName> getEnumConstantDeclarationNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodRefName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefName> getMethodRefNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodRefName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefName> getMethodRefNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeDeclarationName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationName> getAnnotationTypeDeclarationNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeDeclarationName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationName> getAnnotationTypeDeclarationNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleMemberAnnotationTypeName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationTypeName> getSingleMemberAnnotationTypeNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleMemberAnnotationTypeName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationTypeName> getSingleMemberAnnotationTypeNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ExpressionMethodReferenceName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceName> getExpressionMethodReferenceNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ExpressionMethodReferenceName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceName> getExpressionMethodReferenceNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeMemberDeclarationName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationName> getAnnotationTypeMemberDeclarationNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeMemberDeclarationName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationName> getAnnotationTypeMemberDeclarationNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MarkerAnnotationTypeName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotationTypeName> getMarkerAnnotationTypeNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MarkerAnnotationTypeName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotationTypeName> getMarkerAnnotationTypeNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FieldAccessName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccessName> getFieldAccessNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FieldAccessName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccessName> getFieldAccessNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationReceiverQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverQualifier> getMethodDeclarationReceiverQualifierIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationReceiverQualifier.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverQualifier> getMethodDeclarationReceiverQualifierIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type QualifiedNameName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameName> getQualifiedNameNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type QualifiedNameName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameName> getQualifiedNameNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MemberValuePairName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairName> getMemberValuePairNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MemberValuePairName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairName> getMemberValuePairNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodRefParameterName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterName> getMethodRefParameterNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodRefParameterName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterName> getMethodRefParameterNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperFieldAccessName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessName> getSuperFieldAccessNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperFieldAccessName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessName> getSuperFieldAccessNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type LabeledStatementLabel or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementLabel> getLabeledStatementLabelIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type LabeledStatementLabel.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementLabel> getLabeledStatementLabelIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type PostfixExpressionOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpressionOperand> getPostfixExpressionOperandIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type PostfixExpressionOperand.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpressionOperand> getPostfixExpressionOperandIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MemberRefName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefName> getMemberRefNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MemberRefName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefName> getMemberRefNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumDeclarationName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationName> getEnumDeclarationNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumDeclarationName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationName> getEnumDeclarationNameIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SimpleNameValues or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues> getSimpleNameValuesIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SimpleNameValues.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues> getSimpleNameValuesIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeParameterName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterName> getTypeParameterNameIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeParameterName.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterName> getTypeParameterNameIncidences(EdgeDirection direction);
}
