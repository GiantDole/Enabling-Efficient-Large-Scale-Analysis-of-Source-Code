/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema;

public interface Java8 extends de.uni_koblenz.jgralab.Graph {

	public static final de.uni_koblenz.jgralab.schema.GraphClass GC = de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Java8Schema.instance().getGraphClass();

	// ------------------------ Code for AbstractTypeDeclaration ------------------------

	/**
	 * @return the first AbstractTypeDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AbstractTypeDeclaration getFirstAbstractTypeDeclaration();

	// ------------------------ Code for Access ------------------------

	/**
	 * @return the first Access edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Access getFirstAccess();

	// ------------------------ Code for AnnotatableType ------------------------

	/**
	 * @return the first AnnotatableType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotatableType getFirstAnnotatableType();

	// ------------------------ Code for Annotation ------------------------

	/**
	 * @return the first Annotation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation getFirstAnnotation();

	// ------------------------ Code for AnnotationTypeDeclaration ------------------------

	/**
	 * @return the first AnnotationTypeDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration getFirstAnnotationTypeDeclaration();

	/**
	 * Creates a new AnnotationTypeDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration createAnnotationTypeDeclaration();

	// ------------------------ Code for AnnotationTypeDeclarationAnnotations ------------------------

	/**
	 * @return the first AnnotationTypeDeclarationAnnotations edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationAnnotations getFirstAnnotationTypeDeclarationAnnotations();

	/**
	 * Creates a new AnnotationTypeDeclarationAnnotations edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationAnnotations createAnnotationTypeDeclarationAnnotations(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for AnnotationTypeDeclarationBodyDeclarations ------------------------

	/**
	 * @return the first AnnotationTypeDeclarationBodyDeclarations edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationBodyDeclarations getFirstAnnotationTypeDeclarationBodyDeclarations();

	/**
	 * Creates a new AnnotationTypeDeclarationBodyDeclarations edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationBodyDeclarations createAnnotationTypeDeclarationBodyDeclarations(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration omega);

	// ------------------------ Code for AnnotationTypeDeclarationModifiers ------------------------

	/**
	 * @return the first AnnotationTypeDeclarationModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationModifiers getFirstAnnotationTypeDeclarationModifiers();

	/**
	 * Creates a new AnnotationTypeDeclarationModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationModifiers createAnnotationTypeDeclarationModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for AnnotationTypeDeclarationName ------------------------

	/**
	 * @return the first AnnotationTypeDeclarationName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationName getFirstAnnotationTypeDeclarationName();

	/**
	 * Creates a new AnnotationTypeDeclarationName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationName createAnnotationTypeDeclarationName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for AnnotationTypeMemberDeclaration ------------------------

	/**
	 * @return the first AnnotationTypeMemberDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration getFirstAnnotationTypeMemberDeclaration();

	/**
	 * Creates a new AnnotationTypeMemberDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration createAnnotationTypeMemberDeclaration();

	// ------------------------ Code for AnnotationTypeMemberDeclarationAnnotations ------------------------

	/**
	 * @return the first AnnotationTypeMemberDeclarationAnnotations edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationAnnotations getFirstAnnotationTypeMemberDeclarationAnnotations();

	/**
	 * Creates a new AnnotationTypeMemberDeclarationAnnotations edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationAnnotations createAnnotationTypeMemberDeclarationAnnotations(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for AnnotationTypeMemberDeclarationDefault ------------------------

	/**
	 * @return the first AnnotationTypeMemberDeclarationDefault edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationDefault getFirstAnnotationTypeMemberDeclarationDefault();

	/**
	 * Creates a new AnnotationTypeMemberDeclarationDefault edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationDefault createAnnotationTypeMemberDeclarationDefault(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for AnnotationTypeMemberDeclarationModifiers ------------------------

	/**
	 * @return the first AnnotationTypeMemberDeclarationModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationModifiers getFirstAnnotationTypeMemberDeclarationModifiers();

	/**
	 * Creates a new AnnotationTypeMemberDeclarationModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationModifiers createAnnotationTypeMemberDeclarationModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for AnnotationTypeMemberDeclarationName ------------------------

	/**
	 * @return the first AnnotationTypeMemberDeclarationName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationName getFirstAnnotationTypeMemberDeclarationName();

	/**
	 * Creates a new AnnotationTypeMemberDeclarationName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationName createAnnotationTypeMemberDeclarationName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for AnnotationTypeMemberDeclarationType ------------------------

	/**
	 * @return the first AnnotationTypeMemberDeclarationType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationType getFirstAnnotationTypeMemberDeclarationType();

	/**
	 * Creates a new AnnotationTypeMemberDeclarationType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationType createAnnotationTypeMemberDeclarationType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for AnonymousClassDeclaration ------------------------

	/**
	 * @return the first AnonymousClassDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclaration getFirstAnonymousClassDeclaration();

	/**
	 * Creates a new AnonymousClassDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclaration createAnonymousClassDeclaration();

	// ------------------------ Code for AnonymousClassDeclarationBodyDeclarations ------------------------

	/**
	 * @return the first AnonymousClassDeclarationBodyDeclarations edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclarationBodyDeclarations getFirstAnonymousClassDeclarationBodyDeclarations();

	/**
	 * Creates a new AnonymousClassDeclarationBodyDeclarations edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclarationBodyDeclarations createAnonymousClassDeclarationBodyDeclarations(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration omega);

	// ------------------------ Code for ArrayAccess ------------------------

	/**
	 * @return the first ArrayAccess vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccess getFirstArrayAccess();

	/**
	 * Creates a new ArrayAccess vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccess createArrayAccess();

	// ------------------------ Code for ArrayAccessArray ------------------------

	/**
	 * @return the first ArrayAccessArray edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessArray getFirstArrayAccessArray();

	/**
	 * Creates a new ArrayAccessArray edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessArray createArrayAccessArray(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccess alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ArrayAccessIndex ------------------------

	/**
	 * @return the first ArrayAccessIndex edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessIndex getFirstArrayAccessIndex();

	/**
	 * Creates a new ArrayAccessIndex edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessIndex createArrayAccessIndex(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccess alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ArrayCreation ------------------------

	/**
	 * @return the first ArrayCreation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreation getFirstArrayCreation();

	/**
	 * Creates a new ArrayCreation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreation createArrayCreation();

	// ------------------------ Code for ArrayCreationDimensions ------------------------

	/**
	 * @return the first ArrayCreationDimensions edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationDimensions getFirstArrayCreationDimensions();

	/**
	 * Creates a new ArrayCreationDimensions edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationDimensions createArrayCreationDimensions(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ArrayCreationInitializer ------------------------

	/**
	 * @return the first ArrayCreationInitializer edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationInitializer getFirstArrayCreationInitializer();

	/**
	 * Creates a new ArrayCreationInitializer edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationInitializer createArrayCreationInitializer(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializer omega);

	// ------------------------ Code for ArrayCreationType ------------------------

	/**
	 * @return the first ArrayCreationType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationType getFirstArrayCreationType();

	/**
	 * Creates a new ArrayCreationType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationType createArrayCreationType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayType omega);

	// ------------------------ Code for ArrayInitializer ------------------------

	/**
	 * @return the first ArrayInitializer vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializer getFirstArrayInitializer();

	/**
	 * Creates a new ArrayInitializer vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializer createArrayInitializer();

	// ------------------------ Code for ArrayInitializerExpressions ------------------------

	/**
	 * @return the first ArrayInitializerExpressions edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializerExpressions getFirstArrayInitializerExpressions();

	/**
	 * Creates a new ArrayInitializerExpressions edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializerExpressions createArrayInitializerExpressions(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializer alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ArrayType ------------------------

	/**
	 * @return the first ArrayType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayType getFirstArrayType();

	/**
	 * Creates a new ArrayType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayType createArrayType();

	// ------------------------ Code for ArrayTypeComponentType ------------------------

	/**
	 * @return the first ArrayTypeComponentType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayTypeComponentType getFirstArrayTypeComponentType();

	/**
	 * Creates a new ArrayTypeComponentType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayTypeComponentType createArrayTypeComponentType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for AssertStatement ------------------------

	/**
	 * @return the first AssertStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatement getFirstAssertStatement();

	/**
	 * Creates a new AssertStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatement createAssertStatement();

	// ------------------------ Code for AssertStatementMessage ------------------------

	/**
	 * @return the first AssertStatementMessage edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatementMessage getFirstAssertStatementMessage();

	/**
	 * Creates a new AssertStatementMessage edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatementMessage createAssertStatementMessage(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for Assignment ------------------------

	/**
	 * @return the first Assignment vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Assignment getFirstAssignment();

	/**
	 * Creates a new Assignment vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Assignment createAssignment();

	// ------------------------ Code for AssignmentLeftHandSide ------------------------

	/**
	 * @return the first AssignmentLeftHandSide edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentLeftHandSide getFirstAssignmentLeftHandSide();

	/**
	 * Creates a new AssignmentLeftHandSide edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentLeftHandSide createAssignmentLeftHandSide(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Assignment alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for AssignmentRightHandSide ------------------------

	/**
	 * @return the first AssignmentRightHandSide edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentRightHandSide getFirstAssignmentRightHandSide();

	/**
	 * Creates a new AssignmentRightHandSide edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentRightHandSide createAssignmentRightHandSide(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Assignment alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for Block ------------------------

	/**
	 * @return the first Block vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block getFirstBlock();

	/**
	 * Creates a new Block vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block createBlock();

	// ------------------------ Code for BlockStatements ------------------------

	/**
	 * @return the first BlockStatements edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BlockStatements getFirstBlockStatements();

	/**
	 * Creates a new BlockStatements edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BlockStatements createBlockStatements(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for BodyDeclaration ------------------------

	/**
	 * @return the first BodyDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration getFirstBodyDeclaration();

	// ------------------------ Code for BodyDeclarationJavadoc ------------------------

	/**
	 * @return the first BodyDeclarationJavadoc edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclarationJavadoc getFirstBodyDeclarationJavadoc();

	/**
	 * Creates a new BodyDeclarationJavadoc edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclarationJavadoc createBodyDeclarationJavadoc(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Javadoc omega);

	// ------------------------ Code for BooleanLiteral ------------------------

	/**
	 * @return the first BooleanLiteral vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BooleanLiteral getFirstBooleanLiteral();

	/**
	 * Creates a new BooleanLiteral vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BooleanLiteral createBooleanLiteral();

	// ------------------------ Code for BreakStatement ------------------------

	/**
	 * @return the first BreakStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BreakStatement getFirstBreakStatement();

	/**
	 * Creates a new BreakStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BreakStatement createBreakStatement();

	// ------------------------ Code for CastExpression ------------------------

	/**
	 * @return the first CastExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpression getFirstCastExpression();

	/**
	 * Creates a new CastExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpression createCastExpression();

	// ------------------------ Code for CastExpressionType ------------------------

	/**
	 * @return the first CastExpressionType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpressionType getFirstCastExpressionType();

	/**
	 * Creates a new CastExpressionType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpressionType createCastExpressionType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for CatchClause ------------------------

	/**
	 * @return the first CatchClause vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClause getFirstCatchClause();

	/**
	 * Creates a new CatchClause vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClause createCatchClause();

	// ------------------------ Code for CatchClauseBody ------------------------

	/**
	 * @return the first CatchClauseBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClauseBody getFirstCatchClauseBody();

	/**
	 * Creates a new CatchClauseBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClauseBody createCatchClauseBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClause alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block omega);

	// ------------------------ Code for CatchClauseException ------------------------

	/**
	 * @return the first CatchClauseException edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClauseException getFirstCatchClauseException();

	/**
	 * Creates a new CatchClauseException edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClauseException createCatchClauseException(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClause alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration omega);

	// ------------------------ Code for CharacterLiteral ------------------------

	/**
	 * @return the first CharacterLiteral vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CharacterLiteral getFirstCharacterLiteral();

	/**
	 * Creates a new CharacterLiteral vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CharacterLiteral createCharacterLiteral();

	// ------------------------ Code for Child ------------------------

	/**
	 * @return the first Child edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Child getFirstChild();

	// ------------------------ Code for ClassInstanceCreation ------------------------

	/**
	 * @return the first ClassInstanceCreation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreation getFirstClassInstanceCreation();

	/**
	 * Creates a new ClassInstanceCreation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreation createClassInstanceCreation();

	// ------------------------ Code for ClassInstanceCreationAnonymousClassDecl ------------------------

	/**
	 * @return the first ClassInstanceCreationAnonymousClassDecl edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationAnonymousClassDecl getFirstClassInstanceCreationAnonymousClassDecl();

	/**
	 * Creates a new ClassInstanceCreationAnonymousClassDecl edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationAnonymousClassDecl createClassInstanceCreationAnonymousClassDecl(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclaration omega);

	// ------------------------ Code for ClassInstanceCreationArguments ------------------------

	/**
	 * @return the first ClassInstanceCreationArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationArguments getFirstClassInstanceCreationArguments();

	/**
	 * Creates a new ClassInstanceCreationArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationArguments createClassInstanceCreationArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ClassInstanceCreationType ------------------------

	/**
	 * @return the first ClassInstanceCreationType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationType getFirstClassInstanceCreationType();

	/**
	 * Creates a new ClassInstanceCreationType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationType createClassInstanceCreationType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for Comment ------------------------

	/**
	 * @return the first Comment vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Comment getFirstComment();

	/**
	 * Creates a new Comment vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Comment createComment();

	// ------------------------ Code for CompilationUnit ------------------------

	/**
	 * @return the first CompilationUnit vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit getFirstCompilationUnit();

	/**
	 * Creates a new CompilationUnit vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit createCompilationUnit();

	// ------------------------ Code for CompilationUnitImports ------------------------

	/**
	 * @return the first CompilationUnitImports edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitImports getFirstCompilationUnitImports();

	/**
	 * Creates a new CompilationUnitImports edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitImports createCompilationUnitImports(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ImportDeclaration omega);

	// ------------------------ Code for CompilationUnitPackage ------------------------

	/**
	 * @return the first CompilationUnitPackage edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitPackage getFirstCompilationUnitPackage();

	/**
	 * Creates a new CompilationUnitPackage edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitPackage createCompilationUnitPackage(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PackageDeclaration omega);

	// ------------------------ Code for CompilationUnitTypes ------------------------

	/**
	 * @return the first CompilationUnitTypes edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitTypes getFirstCompilationUnitTypes();

	/**
	 * Creates a new CompilationUnitTypes edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitTypes createCompilationUnitTypes(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AbstractTypeDeclaration omega);

	// ------------------------ Code for ConditionalExpression ------------------------

	/**
	 * @return the first ConditionalExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpression getFirstConditionalExpression();

	/**
	 * Creates a new ConditionalExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpression createConditionalExpression();

	// ------------------------ Code for ConditionalExpressionElseExpression ------------------------

	/**
	 * @return the first ConditionalExpressionElseExpression edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionElseExpression getFirstConditionalExpressionElseExpression();

	/**
	 * Creates a new ConditionalExpressionElseExpression edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionElseExpression createConditionalExpressionElseExpression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ConditionalExpressionThenExpression ------------------------

	/**
	 * @return the first ConditionalExpressionThenExpression edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionThenExpression getFirstConditionalExpressionThenExpression();

	/**
	 * Creates a new ConditionalExpressionThenExpression edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionThenExpression createConditionalExpressionThenExpression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ConstructorInvocation ------------------------

	/**
	 * @return the first ConstructorInvocation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocation getFirstConstructorInvocation();

	/**
	 * Creates a new ConstructorInvocation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocation createConstructorInvocation();

	// ------------------------ Code for ConstructorInvocationArguments ------------------------

	/**
	 * @return the first ConstructorInvocationArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationArguments getFirstConstructorInvocationArguments();

	/**
	 * Creates a new ConstructorInvocationArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationArguments createConstructorInvocationArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ConstructorInvocationTypeArguments ------------------------

	/**
	 * @return the first ConstructorInvocationTypeArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationTypeArguments getFirstConstructorInvocationTypeArguments();

	/**
	 * Creates a new ConstructorInvocationTypeArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationTypeArguments createConstructorInvocationTypeArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for ContinueStatement ------------------------

	/**
	 * @return the first ContinueStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ContinueStatement getFirstContinueStatement();

	/**
	 * Creates a new ContinueStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ContinueStatement createContinueStatement();

	// ------------------------ Code for CreationReference ------------------------

	/**
	 * @return the first CreationReference vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReference getFirstCreationReference();

	/**
	 * Creates a new CreationReference vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReference createCreationReference();

	// ------------------------ Code for CreationReferenceType ------------------------

	/**
	 * @return the first CreationReferenceType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceType getFirstCreationReferenceType();

	/**
	 * Creates a new CreationReferenceType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceType createCreationReferenceType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReference alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for CreationReferenceTypeArguments ------------------------

	/**
	 * @return the first CreationReferenceTypeArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceTypeArguments getFirstCreationReferenceTypeArguments();

	/**
	 * Creates a new CreationReferenceTypeArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceTypeArguments createCreationReferenceTypeArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReference alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for Dimension ------------------------

	/**
	 * @return the first Dimension vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Dimension getFirstDimension();

	/**
	 * Creates a new Dimension vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Dimension createDimension();

	// ------------------------ Code for DimensionAnnotations ------------------------

	/**
	 * @return the first DimensionAnnotations edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DimensionAnnotations getFirstDimensionAnnotations();

	/**
	 * Creates a new DimensionAnnotations edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DimensionAnnotations createDimensionAnnotations(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Dimension alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for DoStatement ------------------------

	/**
	 * @return the first DoStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatement getFirstDoStatement();

	/**
	 * Creates a new DoStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatement createDoStatement();

	// ------------------------ Code for DoStatementBody ------------------------

	/**
	 * @return the first DoStatementBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatementBody getFirstDoStatementBody();

	/**
	 * Creates a new DoStatementBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatementBody createDoStatementBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block omega);

	// ------------------------ Code for Element ------------------------

	/**
	 * @return the first Element vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element getFirstElement();

	// ------------------------ Code for ElementExpression ------------------------

	/**
	 * @return the first ElementExpression edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression getFirstElementExpression();

	/**
	 * Creates a new ElementExpression edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression createElementExpression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for EmptyStatement ------------------------

	/**
	 * @return the first EmptyStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EmptyStatement getFirstEmptyStatement();

	/**
	 * Creates a new EmptyStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EmptyStatement createEmptyStatement();

	// ------------------------ Code for EnhancedForStatement ------------------------

	/**
	 * @return the first EnhancedForStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatement getFirstEnhancedForStatement();

	/**
	 * Creates a new EnhancedForStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatement createEnhancedForStatement();

	// ------------------------ Code for EnhancedForStatementBody ------------------------

	/**
	 * @return the first EnhancedForStatementBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatementBody getFirstEnhancedForStatementBody();

	/**
	 * Creates a new EnhancedForStatementBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatementBody createEnhancedForStatementBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for EnhancedForStatementParameter ------------------------

	/**
	 * @return the first EnhancedForStatementParameter edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatementParameter getFirstEnhancedForStatementParameter();

	/**
	 * Creates a new EnhancedForStatementParameter edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatementParameter createEnhancedForStatementParameter(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration omega);

	// ------------------------ Code for EnumConstantDeclaration ------------------------

	/**
	 * @return the first EnumConstantDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration getFirstEnumConstantDeclaration();

	/**
	 * Creates a new EnumConstantDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration createEnumConstantDeclaration();

	// ------------------------ Code for EnumConstantDeclarationAnnotations ------------------------

	/**
	 * @return the first EnumConstantDeclarationAnnotations edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnnotations getFirstEnumConstantDeclarationAnnotations();

	/**
	 * Creates a new EnumConstantDeclarationAnnotations edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnnotations createEnumConstantDeclarationAnnotations(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for EnumConstantDeclarationAnonymousClassDeclaration ------------------------

	/**
	 * @return the first EnumConstantDeclarationAnonymousClassDeclaration edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnonymousClassDeclaration getFirstEnumConstantDeclarationAnonymousClassDeclaration();

	/**
	 * Creates a new EnumConstantDeclarationAnonymousClassDeclaration edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnonymousClassDeclaration createEnumConstantDeclarationAnonymousClassDeclaration(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclaration omega);

	// ------------------------ Code for EnumConstantDeclarationArguments ------------------------

	/**
	 * @return the first EnumConstantDeclarationArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationArguments getFirstEnumConstantDeclarationArguments();

	/**
	 * Creates a new EnumConstantDeclarationArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationArguments createEnumConstantDeclarationArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for EnumConstantDeclarationModifiers ------------------------

	/**
	 * @return the first EnumConstantDeclarationModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationModifiers getFirstEnumConstantDeclarationModifiers();

	/**
	 * Creates a new EnumConstantDeclarationModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationModifiers createEnumConstantDeclarationModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for EnumConstantDeclarationName ------------------------

	/**
	 * @return the first EnumConstantDeclarationName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationName getFirstEnumConstantDeclarationName();

	/**
	 * Creates a new EnumConstantDeclarationName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationName createEnumConstantDeclarationName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for EnumDeclaration ------------------------

	/**
	 * @return the first EnumDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration getFirstEnumDeclaration();

	/**
	 * Creates a new EnumDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration createEnumDeclaration();

	// ------------------------ Code for EnumDeclarationAnnotations ------------------------

	/**
	 * @return the first EnumDeclarationAnnotations edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationAnnotations getFirstEnumDeclarationAnnotations();

	/**
	 * Creates a new EnumDeclarationAnnotations edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationAnnotations createEnumDeclarationAnnotations(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for EnumDeclarationBodyDeclaration ------------------------

	/**
	 * @return the first EnumDeclarationBodyDeclaration edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationBodyDeclaration getFirstEnumDeclarationBodyDeclaration();

	/**
	 * Creates a new EnumDeclarationBodyDeclaration edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationBodyDeclaration createEnumDeclarationBodyDeclaration(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration omega);

	// ------------------------ Code for EnumDeclarationEnumConstants ------------------------

	/**
	 * @return the first EnumDeclarationEnumConstants edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationEnumConstants getFirstEnumDeclarationEnumConstants();

	/**
	 * Creates a new EnumDeclarationEnumConstants edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationEnumConstants createEnumDeclarationEnumConstants(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration omega);

	// ------------------------ Code for EnumDeclarationModifiers ------------------------

	/**
	 * @return the first EnumDeclarationModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationModifiers getFirstEnumDeclarationModifiers();

	/**
	 * Creates a new EnumDeclarationModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationModifiers createEnumDeclarationModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for EnumDeclarationName ------------------------

	/**
	 * @return the first EnumDeclarationName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationName getFirstEnumDeclarationName();

	/**
	 * Creates a new EnumDeclarationName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationName createEnumDeclarationName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for EnumDeclarationSuperInterfaceTypes ------------------------

	/**
	 * @return the first EnumDeclarationSuperInterfaceTypes edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationSuperInterfaceTypes getFirstEnumDeclarationSuperInterfaceTypes();

	/**
	 * Creates a new EnumDeclarationSuperInterfaceTypes edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationSuperInterfaceTypes createEnumDeclarationSuperInterfaceTypes(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for Expression ------------------------

	/**
	 * @return the first Expression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression getFirstExpression();

	// ------------------------ Code for ExpressionAccess1 ------------------------

	/**
	 * @return the first ExpressionAccess1 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1 getFirstExpressionAccess1();

	/**
	 * Creates a new ExpressionAccess1 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1 createExpressionAccess1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration omega);

	// ------------------------ Code for ExpressionAccess2 ------------------------

	/**
	 * @return the first ExpressionAccess2 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2 getFirstExpressionAccess2();

	/**
	 * Creates a new ExpressionAccess2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2 createExpressionAccess2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration omega);

	// ------------------------ Code for ExpressionMethodReference ------------------------

	/**
	 * @return the first ExpressionMethodReference vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReference getFirstExpressionMethodReference();

	/**
	 * Creates a new ExpressionMethodReference vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReference createExpressionMethodReference();

	// ------------------------ Code for ExpressionMethodReferenceArguments ------------------------

	/**
	 * @return the first ExpressionMethodReferenceArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceArguments getFirstExpressionMethodReferenceArguments();

	/**
	 * Creates a new ExpressionMethodReferenceArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceArguments createExpressionMethodReferenceArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReference alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for ExpressionMethodReferenceName ------------------------

	/**
	 * @return the first ExpressionMethodReferenceName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceName getFirstExpressionMethodReferenceName();

	/**
	 * Creates a new ExpressionMethodReferenceName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceName createExpressionMethodReferenceName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReference alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for ExpressionStatement ------------------------

	/**
	 * @return the first ExpressionStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionStatement getFirstExpressionStatement();

	/**
	 * Creates a new ExpressionStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionStatement createExpressionStatement();

	// ------------------------ Code for FieldAccess ------------------------

	/**
	 * @return the first FieldAccess vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccess getFirstFieldAccess();

	/**
	 * Creates a new FieldAccess vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccess createFieldAccess();

	// ------------------------ Code for FieldAccessName ------------------------

	/**
	 * @return the first FieldAccessName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccessName getFirstFieldAccessName();

	/**
	 * Creates a new FieldAccessName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccessName createFieldAccessName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccess alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for FieldDeclaration ------------------------

	/**
	 * @return the first FieldDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration getFirstFieldDeclaration();

	/**
	 * Creates a new FieldDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration createFieldDeclaration();

	// ------------------------ Code for FieldDeclarationAnnotation ------------------------

	/**
	 * @return the first FieldDeclarationAnnotation edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationAnnotation getFirstFieldDeclarationAnnotation();

	/**
	 * Creates a new FieldDeclarationAnnotation edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationAnnotation createFieldDeclarationAnnotation(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for FieldDeclarationFragments ------------------------

	/**
	 * @return the first FieldDeclarationFragments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationFragments getFirstFieldDeclarationFragments();

	/**
	 * Creates a new FieldDeclarationFragments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationFragments createFieldDeclarationFragments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment omega);

	// ------------------------ Code for FieldDeclarationModifiers ------------------------

	/**
	 * @return the first FieldDeclarationModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationModifiers getFirstFieldDeclarationModifiers();

	/**
	 * Creates a new FieldDeclarationModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationModifiers createFieldDeclarationModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for FieldDeclarationType ------------------------

	/**
	 * @return the first FieldDeclarationType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationType getFirstFieldDeclarationType();

	/**
	 * Creates a new FieldDeclarationType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationType createFieldDeclarationType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for ForStatement ------------------------

	/**
	 * @return the first ForStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatement getFirstForStatement();

	/**
	 * Creates a new ForStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatement createForStatement();

	// ------------------------ Code for ForStatementBody ------------------------

	/**
	 * @return the first ForStatementBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementBody getFirstForStatementBody();

	/**
	 * Creates a new ForStatementBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementBody createForStatementBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for ForStatementInitializers ------------------------

	/**
	 * @return the first ForStatementInitializers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementInitializers getFirstForStatementInitializers();

	/**
	 * Creates a new ForStatementInitializers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementInitializers createForStatementInitializers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for ForStatementUpdaters ------------------------

	/**
	 * @return the first ForStatementUpdaters edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementUpdaters getFirstForStatementUpdaters();

	/**
	 * Creates a new ForStatementUpdaters edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementUpdaters createForStatementUpdaters(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for IJavaProject ------------------------

	/**
	 * @return the first IJavaProject vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProject getFirstIJavaProject();

	/**
	 * Creates a new IJavaProject vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProject createIJavaProject();

	// ------------------------ Code for IJavaProjectFragements ------------------------

	/**
	 * @return the first IJavaProjectFragements edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProjectFragements getFirstIJavaProjectFragements();

	/**
	 * Creates a new IJavaProjectFragements edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProjectFragements createIJavaProjectFragements(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProject alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragment omega);

	// ------------------------ Code for IJavaProjectUnits ------------------------

	/**
	 * @return the first IJavaProjectUnits edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProjectUnits getFirstIJavaProjectUnits();

	/**
	 * Creates a new IJavaProjectUnits edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProjectUnits createIJavaProjectUnits(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProject alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit omega);

	// ------------------------ Code for IPackageFragment ------------------------

	/**
	 * @return the first IPackageFragment vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragment getFirstIPackageFragment();

	/**
	 * Creates a new IPackageFragment vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragment createIPackageFragment();

	// ------------------------ Code for IPackageFragmentUnits ------------------------

	/**
	 * @return the first IPackageFragmentUnits edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragmentUnits getFirstIPackageFragmentUnits();

	/**
	 * Creates a new IPackageFragmentUnits edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragmentUnits createIPackageFragmentUnits(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragment alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit omega);

	// ------------------------ Code for IfStatement ------------------------

	/**
	 * @return the first IfStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatement getFirstIfStatement();

	/**
	 * Creates a new IfStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatement createIfStatement();

	// ------------------------ Code for IfStatementElseStatement ------------------------

	/**
	 * @return the first IfStatementElseStatement edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatementElseStatement getFirstIfStatementElseStatement();

	/**
	 * Creates a new IfStatementElseStatement edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatementElseStatement createIfStatementElseStatement(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for IfStatementThenStatement ------------------------

	/**
	 * @return the first IfStatementThenStatement edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatementThenStatement getFirstIfStatementThenStatement();

	/**
	 * Creates a new IfStatementThenStatement edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatementThenStatement createIfStatementThenStatement(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for ImportDeclaration ------------------------

	/**
	 * @return the first ImportDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ImportDeclaration getFirstImportDeclaration();

	/**
	 * Creates a new ImportDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ImportDeclaration createImportDeclaration();

	// ------------------------ Code for InfixExpression ------------------------

	/**
	 * @return the first InfixExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpression getFirstInfixExpression();

	/**
	 * Creates a new InfixExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpression createInfixExpression();

	// ------------------------ Code for InfixExpressionExtendedOperands ------------------------

	/**
	 * @return the first InfixExpressionExtendedOperands edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionExtendedOperands getFirstInfixExpressionExtendedOperands();

	/**
	 * Creates a new InfixExpressionExtendedOperands edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionExtendedOperands createInfixExpressionExtendedOperands(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for InfixExpressionLeftOperand ------------------------

	/**
	 * @return the first InfixExpressionLeftOperand edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionLeftOperand getFirstInfixExpressionLeftOperand();

	/**
	 * Creates a new InfixExpressionLeftOperand edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionLeftOperand createInfixExpressionLeftOperand(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for InfixExpressionRightOperand ------------------------

	/**
	 * @return the first InfixExpressionRightOperand edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionRightOperand getFirstInfixExpressionRightOperand();

	/**
	 * Creates a new InfixExpressionRightOperand edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionRightOperand createInfixExpressionRightOperand(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for Initializer ------------------------

	/**
	 * @return the first Initializer vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Initializer getFirstInitializer();

	/**
	 * Creates a new Initializer vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Initializer createInitializer();

	// ------------------------ Code for InitializerAnnotation ------------------------

	/**
	 * @return the first InitializerAnnotation edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerAnnotation getFirstInitializerAnnotation();

	/**
	 * Creates a new InitializerAnnotation edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerAnnotation createInitializerAnnotation(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Initializer alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for InitializerBody ------------------------

	/**
	 * @return the first InitializerBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerBody getFirstInitializerBody();

	/**
	 * Creates a new InitializerBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerBody createInitializerBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Initializer alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block omega);

	// ------------------------ Code for InitializerModifiers ------------------------

	/**
	 * @return the first InitializerModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerModifiers getFirstInitializerModifiers();

	/**
	 * Creates a new InitializerModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerModifiers createInitializerModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Initializer alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for InstanceofExpression ------------------------

	/**
	 * @return the first InstanceofExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpression getFirstInstanceofExpression();

	/**
	 * Creates a new InstanceofExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpression createInstanceofExpression();

	// ------------------------ Code for InstanceofExpressionLeftOperand ------------------------

	/**
	 * @return the first InstanceofExpressionLeftOperand edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionLeftOperand getFirstInstanceofExpressionLeftOperand();

	/**
	 * Creates a new InstanceofExpressionLeftOperand edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionLeftOperand createInstanceofExpressionLeftOperand(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for InstanceofExpressionRightOperand ------------------------

	/**
	 * @return the first InstanceofExpressionRightOperand edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionRightOperand getFirstInstanceofExpressionRightOperand();

	/**
	 * Creates a new InstanceofExpressionRightOperand edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionRightOperand createInstanceofExpressionRightOperand(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for IntersectionType ------------------------

	/**
	 * @return the first IntersectionType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionType getFirstIntersectionType();

	/**
	 * Creates a new IntersectionType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionType createIntersectionType();

	// ------------------------ Code for IntersectionTypeTypes ------------------------

	/**
	 * @return the first IntersectionTypeTypes edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionTypeTypes getFirstIntersectionTypeTypes();

	/**
	 * Creates a new IntersectionTypeTypes edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionTypeTypes createIntersectionTypeTypes(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for Javadoc ------------------------

	/**
	 * @return the first Javadoc vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Javadoc getFirstJavadoc();

	/**
	 * Creates a new Javadoc vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Javadoc createJavadoc();

	// ------------------------ Code for JavadocTags ------------------------

	/**
	 * @return the first JavadocTags edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.JavadocTags getFirstJavadocTags();

	/**
	 * Creates a new JavadocTags edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.JavadocTags createJavadocTags(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Javadoc alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement omega);

	// ------------------------ Code for LabeledStatement ------------------------

	/**
	 * @return the first LabeledStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatement getFirstLabeledStatement();

	/**
	 * Creates a new LabeledStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatement createLabeledStatement();

	// ------------------------ Code for LabeledStatementBody ------------------------

	/**
	 * @return the first LabeledStatementBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementBody getFirstLabeledStatementBody();

	/**
	 * Creates a new LabeledStatementBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementBody createLabeledStatementBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for LabeledStatementLabel ------------------------

	/**
	 * @return the first LabeledStatementLabel edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementLabel getFirstLabeledStatementLabel();

	/**
	 * Creates a new LabeledStatementLabel edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementLabel createLabeledStatementLabel(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for LambdaExpression ------------------------

	/**
	 * @return the first LambdaExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpression getFirstLambdaExpression();

	/**
	 * Creates a new LambdaExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpression createLambdaExpression();

	// ------------------------ Code for LambdaExpressionBody ------------------------

	/**
	 * @return the first LambdaExpressionBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpressionBody getFirstLambdaExpressionBody();

	/**
	 * Creates a new LambdaExpressionBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpressionBody createLambdaExpressionBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element omega);

	// ------------------------ Code for LambdaExpressionParameters ------------------------

	/**
	 * @return the first LambdaExpressionParameters edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpressionParameters getFirstLambdaExpressionParameters();

	/**
	 * Creates a new LambdaExpressionParameters edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpressionParameters createLambdaExpressionParameters(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration omega);

	// ------------------------ Code for MarkerAnnotation ------------------------

	/**
	 * @return the first MarkerAnnotation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotation getFirstMarkerAnnotation();

	/**
	 * Creates a new MarkerAnnotation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotation createMarkerAnnotation();

	// ------------------------ Code for MarkerAnnotationTypeName ------------------------

	/**
	 * @return the first MarkerAnnotationTypeName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotationTypeName getFirstMarkerAnnotationTypeName();

	/**
	 * Creates a new MarkerAnnotationTypeName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotationTypeName createMarkerAnnotationTypeName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for MemberRef ------------------------

	/**
	 * @return the first MemberRef vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRef getFirstMemberRef();

	/**
	 * Creates a new MemberRef vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRef createMemberRef();

	// ------------------------ Code for MemberRefName ------------------------

	/**
	 * @return the first MemberRefName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefName getFirstMemberRefName();

	/**
	 * Creates a new MemberRefName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefName createMemberRefName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRef alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for MemberRefQualifier ------------------------

	/**
	 * @return the first MemberRefQualifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefQualifier getFirstMemberRefQualifier();

	/**
	 * Creates a new MemberRefQualifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefQualifier createMemberRefQualifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRef alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for MemberValuePair ------------------------

	/**
	 * @return the first MemberValuePair vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePair getFirstMemberValuePair();

	/**
	 * Creates a new MemberValuePair vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePair createMemberValuePair();

	// ------------------------ Code for MemberValuePairName ------------------------

	/**
	 * @return the first MemberValuePairName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairName getFirstMemberValuePairName();

	/**
	 * Creates a new MemberValuePairName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairName createMemberValuePairName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePair alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for MemberValuePairValue ------------------------

	/**
	 * @return the first MemberValuePairValue edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairValue getFirstMemberValuePairValue();

	/**
	 * Creates a new MemberValuePairValue edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairValue createMemberValuePairValue(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePair alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for MethodDeclaration ------------------------

	/**
	 * @return the first MethodDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration getFirstMethodDeclaration();

	/**
	 * Creates a new MethodDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration createMethodDeclaration();

	// ------------------------ Code for MethodDeclarationAnnotation ------------------------

	/**
	 * @return the first MethodDeclarationAnnotation edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationAnnotation getFirstMethodDeclarationAnnotation();

	/**
	 * Creates a new MethodDeclarationAnnotation edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationAnnotation createMethodDeclarationAnnotation(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for MethodDeclarationBody ------------------------

	/**
	 * @return the first MethodDeclarationBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationBody getFirstMethodDeclarationBody();

	/**
	 * Creates a new MethodDeclarationBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationBody createMethodDeclarationBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block omega);

	// ------------------------ Code for MethodDeclarationModifiers ------------------------

	/**
	 * @return the first MethodDeclarationModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationModifiers getFirstMethodDeclarationModifiers();

	/**
	 * Creates a new MethodDeclarationModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationModifiers createMethodDeclarationModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for MethodDeclarationParameters ------------------------

	/**
	 * @return the first MethodDeclarationParameters edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationParameters getFirstMethodDeclarationParameters();

	/**
	 * Creates a new MethodDeclarationParameters edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationParameters createMethodDeclarationParameters(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration omega);

	// ------------------------ Code for MethodDeclarationReceiverQualifier ------------------------

	/**
	 * @return the first MethodDeclarationReceiverQualifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverQualifier getFirstMethodDeclarationReceiverQualifier();

	/**
	 * Creates a new MethodDeclarationReceiverQualifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverQualifier createMethodDeclarationReceiverQualifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for MethodDeclarationReceiverType ------------------------

	/**
	 * @return the first MethodDeclarationReceiverType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverType getFirstMethodDeclarationReceiverType();

	/**
	 * Creates a new MethodDeclarationReceiverType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverType createMethodDeclarationReceiverType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for MethodDeclarationReturnType ------------------------

	/**
	 * @return the first MethodDeclarationReturnType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReturnType getFirstMethodDeclarationReturnType();

	/**
	 * Creates a new MethodDeclarationReturnType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReturnType createMethodDeclarationReturnType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for MethodDeclarationThrownExceptions ------------------------

	/**
	 * @return the first MethodDeclarationThrownExceptions edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationThrownExceptions getFirstMethodDeclarationThrownExceptions();

	/**
	 * Creates a new MethodDeclarationThrownExceptions edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationThrownExceptions createMethodDeclarationThrownExceptions(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for MethodDeclarationTypeParameters ------------------------

	/**
	 * @return the first MethodDeclarationTypeParameters edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationTypeParameters getFirstMethodDeclarationTypeParameters();

	/**
	 * Creates a new MethodDeclarationTypeParameters edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationTypeParameters createMethodDeclarationTypeParameters(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter omega);

	// ------------------------ Code for MethodInvocation ------------------------

	/**
	 * @return the first MethodInvocation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocation getFirstMethodInvocation();

	/**
	 * Creates a new MethodInvocation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocation createMethodInvocation();

	// ------------------------ Code for MethodInvocationArguments ------------------------

	/**
	 * @return the first MethodInvocationArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocationArguments getFirstMethodInvocationArguments();

	/**
	 * Creates a new MethodInvocationArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocationArguments createMethodInvocationArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for MethodRef ------------------------

	/**
	 * @return the first MethodRef vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef getFirstMethodRef();

	/**
	 * Creates a new MethodRef vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef createMethodRef();

	// ------------------------ Code for MethodRefName ------------------------

	/**
	 * @return the first MethodRefName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefName getFirstMethodRefName();

	/**
	 * Creates a new MethodRefName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefName createMethodRefName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for MethodRefParameter ------------------------

	/**
	 * @return the first MethodRefParameter vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameter getFirstMethodRefParameter();

	/**
	 * Creates a new MethodRefParameter vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameter createMethodRefParameter();

	// ------------------------ Code for MethodRefParameterName ------------------------

	/**
	 * @return the first MethodRefParameterName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterName getFirstMethodRefParameterName();

	/**
	 * Creates a new MethodRefParameterName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterName createMethodRefParameterName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameter alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for MethodRefParameterType ------------------------

	/**
	 * @return the first MethodRefParameterType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterType getFirstMethodRefParameterType();

	/**
	 * Creates a new MethodRefParameterType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterType createMethodRefParameterType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameter alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for MethodRefParameters ------------------------

	/**
	 * @return the first MethodRefParameters edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameters getFirstMethodRefParameters();

	/**
	 * Creates a new MethodRefParameters edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameters createMethodRefParameters(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameter omega);

	// ------------------------ Code for MethodRefQualifier ------------------------

	/**
	 * @return the first MethodRefQualifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefQualifier getFirstMethodRefQualifier();

	/**
	 * Creates a new MethodRefQualifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefQualifier createMethodRefQualifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for MethodReference ------------------------

	/**
	 * @return the first MethodReference vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodReference getFirstMethodReference();

	// ------------------------ Code for Modifier ------------------------

	/**
	 * @return the first Modifier vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier getFirstModifier();

	/**
	 * Creates a new Modifier vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier createModifier();

	// ------------------------ Code for Name ------------------------

	/**
	 * @return the first Name vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name getFirstName();

	// ------------------------ Code for NameQualifiedType ------------------------

	/**
	 * @return the first NameQualifiedType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NameQualifiedType getFirstNameQualifiedType();

	/**
	 * Creates a new NameQualifiedType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NameQualifiedType createNameQualifiedType();

	// ------------------------ Code for Node ------------------------

	/**
	 * @return the first Node vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node getFirstNode();

	// ------------------------ Code for NormalAnnotation ------------------------

	/**
	 * @return the first NormalAnnotation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotation getFirstNormalAnnotation();

	/**
	 * Creates a new NormalAnnotation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotation createNormalAnnotation();

	// ------------------------ Code for NormalAnnotationTypeName ------------------------

	/**
	 * @return the first NormalAnnotationTypeName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotationTypeName getFirstNormalAnnotationTypeName();

	/**
	 * Creates a new NormalAnnotationTypeName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotationTypeName createNormalAnnotationTypeName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for NormalAnnotationValues ------------------------

	/**
	 * @return the first NormalAnnotationValues edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotationValues getFirstNormalAnnotationValues();

	/**
	 * Creates a new NormalAnnotationValues edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotationValues createNormalAnnotationValues(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePair omega);

	// ------------------------ Code for NullLiteral ------------------------

	/**
	 * @return the first NullLiteral vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NullLiteral getFirstNullLiteral();

	/**
	 * Creates a new NullLiteral vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NullLiteral createNullLiteral();

	// ------------------------ Code for NumberLiteral ------------------------

	/**
	 * @return the first NumberLiteral vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NumberLiteral getFirstNumberLiteral();

	/**
	 * Creates a new NumberLiteral vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NumberLiteral createNumberLiteral();

	// ------------------------ Code for PackageDeclaration ------------------------

	/**
	 * @return the first PackageDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PackageDeclaration getFirstPackageDeclaration();

	/**
	 * Creates a new PackageDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PackageDeclaration createPackageDeclaration();

	// ------------------------ Code for ParameterizedType ------------------------

	/**
	 * @return the first ParameterizedType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedType getFirstParameterizedType();

	/**
	 * Creates a new ParameterizedType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedType createParameterizedType();

	// ------------------------ Code for ParameterizedTypeType ------------------------

	/**
	 * @return the first ParameterizedTypeType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeType getFirstParameterizedTypeType();

	/**
	 * Creates a new ParameterizedTypeType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeType createParameterizedTypeType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType omega);

	// ------------------------ Code for ParameterizedTypeTypeArguments ------------------------

	/**
	 * @return the first ParameterizedTypeTypeArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeTypeArguments getFirstParameterizedTypeTypeArguments();

	/**
	 * Creates a new ParameterizedTypeTypeArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeTypeArguments createParameterizedTypeTypeArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for ParenthesizedExpression ------------------------

	/**
	 * @return the first ParenthesizedExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParenthesizedExpression getFirstParenthesizedExpression();

	/**
	 * Creates a new ParenthesizedExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParenthesizedExpression createParenthesizedExpression();

	// ------------------------ Code for PostfixExpression ------------------------

	/**
	 * @return the first PostfixExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpression getFirstPostfixExpression();

	/**
	 * Creates a new PostfixExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpression createPostfixExpression();

	// ------------------------ Code for PostfixExpressionOperand ------------------------

	/**
	 * @return the first PostfixExpressionOperand edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpressionOperand getFirstPostfixExpressionOperand();

	/**
	 * Creates a new PostfixExpressionOperand edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpressionOperand createPostfixExpressionOperand(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for PrefixExpression ------------------------

	/**
	 * @return the first PrefixExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpression getFirstPrefixExpression();

	/**
	 * Creates a new PrefixExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpression createPrefixExpression();

	// ------------------------ Code for PrefixExpressionOperand ------------------------

	/**
	 * @return the first PrefixExpressionOperand edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpressionOperand getFirstPrefixExpressionOperand();

	/**
	 * Creates a new PrefixExpressionOperand edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpressionOperand createPrefixExpressionOperand(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for PrimitiveType ------------------------

	/**
	 * @return the first PrimitiveType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrimitiveType getFirstPrimitiveType();

	/**
	 * Creates a new PrimitiveType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrimitiveType createPrimitiveType();

	// ------------------------ Code for QualifiedName ------------------------

	/**
	 * @return the first QualifiedName vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedName getFirstQualifiedName();

	/**
	 * Creates a new QualifiedName vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedName createQualifiedName();

	// ------------------------ Code for QualifiedNameName ------------------------

	/**
	 * @return the first QualifiedNameName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameName getFirstQualifiedNameName();

	/**
	 * Creates a new QualifiedNameName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameName createQualifiedNameName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedName alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for QualifiedNameQualifier ------------------------

	/**
	 * @return the first QualifiedNameQualifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameQualifier getFirstQualifiedNameQualifier();

	/**
	 * Creates a new QualifiedNameQualifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameQualifier createQualifiedNameQualifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedName alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for QualifiedType ------------------------

	/**
	 * @return the first QualifiedType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedType getFirstQualifiedType();

	/**
	 * Creates a new QualifiedType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedType createQualifiedType();

	// ------------------------ Code for ReturnStatement ------------------------

	/**
	 * @return the first ReturnStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ReturnStatement getFirstReturnStatement();

	/**
	 * Creates a new ReturnStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ReturnStatement createReturnStatement();

	// ------------------------ Code for SimpleName ------------------------

	/**
	 * @return the first SimpleName vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName getFirstSimpleName();

	/**
	 * Creates a new SimpleName vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName createSimpleName();

	// ------------------------ Code for SimpleNameValues ------------------------

	/**
	 * @return the first SimpleNameValues edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues getFirstSimpleNameValues();

	/**
	 * Creates a new SimpleNameValues edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues createSimpleNameValues(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration omega);

	// ------------------------ Code for SimpleType ------------------------

	/**
	 * @return the first SimpleType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType getFirstSimpleType();

	/**
	 * Creates a new SimpleType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType createSimpleType();

	// ------------------------ Code for SimpleTypeAnnotation ------------------------

	/**
	 * @return the first SimpleTypeAnnotation edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeAnnotation getFirstSimpleTypeAnnotation();

	/**
	 * Creates a new SimpleTypeAnnotation edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeAnnotation createSimpleTypeAnnotation(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for SimpleTypeName ------------------------

	/**
	 * @return the first SimpleTypeName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeName getFirstSimpleTypeName();

	/**
	 * Creates a new SimpleTypeName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeName createSimpleTypeName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for SingleMemberAnnotation ------------------------

	/**
	 * @return the first SingleMemberAnnotation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotation getFirstSingleMemberAnnotation();

	/**
	 * Creates a new SingleMemberAnnotation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotation createSingleMemberAnnotation();

	// ------------------------ Code for SingleMemberAnnotationTypeName ------------------------

	/**
	 * @return the first SingleMemberAnnotationTypeName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationTypeName getFirstSingleMemberAnnotationTypeName();

	/**
	 * Creates a new SingleMemberAnnotationTypeName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationTypeName createSingleMemberAnnotationTypeName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for SingleMemberAnnotationValue ------------------------

	/**
	 * @return the first SingleMemberAnnotationValue edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationValue getFirstSingleMemberAnnotationValue();

	/**
	 * Creates a new SingleMemberAnnotationValue edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationValue createSingleMemberAnnotationValue(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for SingleVariableDeclaration ------------------------

	/**
	 * @return the first SingleVariableDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration getFirstSingleVariableDeclaration();

	/**
	 * Creates a new SingleVariableDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration createSingleVariableDeclaration();

	// ------------------------ Code for SingleVariableDeclarationAnnotation ------------------------

	/**
	 * @return the first SingleVariableDeclarationAnnotation edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationAnnotation getFirstSingleVariableDeclarationAnnotation();

	/**
	 * Creates a new SingleVariableDeclarationAnnotation edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationAnnotation createSingleVariableDeclarationAnnotation(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for SingleVariableDeclarationExtraDimensions ------------------------

	/**
	 * @return the first SingleVariableDeclarationExtraDimensions edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationExtraDimensions getFirstSingleVariableDeclarationExtraDimensions();

	/**
	 * Creates a new SingleVariableDeclarationExtraDimensions edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationExtraDimensions createSingleVariableDeclarationExtraDimensions(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Dimension omega);

	// ------------------------ Code for SingleVariableDeclarationInitializer ------------------------

	/**
	 * @return the first SingleVariableDeclarationInitializer edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationInitializer getFirstSingleVariableDeclarationInitializer();

	/**
	 * Creates a new SingleVariableDeclarationInitializer edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationInitializer createSingleVariableDeclarationInitializer(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for SingleVariableDeclarationModifiers ------------------------

	/**
	 * @return the first SingleVariableDeclarationModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationModifiers getFirstSingleVariableDeclarationModifiers();

	/**
	 * Creates a new SingleVariableDeclarationModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationModifiers createSingleVariableDeclarationModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for SingleVariableDeclarationType ------------------------

	/**
	 * @return the first SingleVariableDeclarationType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationType getFirstSingleVariableDeclarationType();

	/**
	 * Creates a new SingleVariableDeclarationType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationType createSingleVariableDeclarationType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for SingleVariableDeclarationVarargsAnnotations ------------------------

	/**
	 * @return the first SingleVariableDeclarationVarargsAnnotations edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationVarargsAnnotations getFirstSingleVariableDeclarationVarargsAnnotations();

	/**
	 * Creates a new SingleVariableDeclarationVarargsAnnotations edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationVarargsAnnotations createSingleVariableDeclarationVarargsAnnotations(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for Statement ------------------------

	/**
	 * @return the first Statement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement getFirstStatement();

	// ------------------------ Code for StringLiteral ------------------------

	/**
	 * @return the first StringLiteral vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.StringLiteral getFirstStringLiteral();

	/**
	 * Creates a new StringLiteral vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.StringLiteral createStringLiteral();

	// ------------------------ Code for SuperConstructorInvocation ------------------------

	/**
	 * @return the first SuperConstructorInvocation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocation getFirstSuperConstructorInvocation();

	/**
	 * Creates a new SuperConstructorInvocation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocation createSuperConstructorInvocation();

	// ------------------------ Code for SuperConstructorInvocationArgument ------------------------

	/**
	 * @return the first SuperConstructorInvocationArgument edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationArgument getFirstSuperConstructorInvocationArgument();

	/**
	 * Creates a new SuperConstructorInvocationArgument edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationArgument createSuperConstructorInvocationArgument(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for SuperConstructorInvocationTypeArguments ------------------------

	/**
	 * @return the first SuperConstructorInvocationTypeArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationTypeArguments getFirstSuperConstructorInvocationTypeArguments();

	/**
	 * Creates a new SuperConstructorInvocationTypeArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationTypeArguments createSuperConstructorInvocationTypeArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for SuperFieldAccess ------------------------

	/**
	 * @return the first SuperFieldAccess vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccess getFirstSuperFieldAccess();

	/**
	 * Creates a new SuperFieldAccess vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccess createSuperFieldAccess();

	// ------------------------ Code for SuperFieldAccessName ------------------------

	/**
	 * @return the first SuperFieldAccessName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessName getFirstSuperFieldAccessName();

	/**
	 * Creates a new SuperFieldAccessName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessName createSuperFieldAccessName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccess alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for SuperFieldAccessQualifier ------------------------

	/**
	 * @return the first SuperFieldAccessQualifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessQualifier getFirstSuperFieldAccessQualifier();

	/**
	 * Creates a new SuperFieldAccessQualifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessQualifier createSuperFieldAccessQualifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccess alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for SuperMethodInvocation ------------------------

	/**
	 * @return the first SuperMethodInvocation vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocation getFirstSuperMethodInvocation();

	/**
	 * Creates a new SuperMethodInvocation vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocation createSuperMethodInvocation();

	// ------------------------ Code for SuperMethodInvocationArguments ------------------------

	/**
	 * @return the first SuperMethodInvocationArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationArguments getFirstSuperMethodInvocationArguments();

	/**
	 * Creates a new SuperMethodInvocationArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationArguments createSuperMethodInvocationArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for SuperMethodInvocationQualifier ------------------------

	/**
	 * @return the first SuperMethodInvocationQualifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationQualifier getFirstSuperMethodInvocationQualifier();

	/**
	 * Creates a new SuperMethodInvocationQualifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationQualifier createSuperMethodInvocationQualifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocation alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for SuperMethodReference ------------------------

	/**
	 * @return the first SuperMethodReference vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReference getFirstSuperMethodReference();

	/**
	 * Creates a new SuperMethodReference vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReference createSuperMethodReference();

	// ------------------------ Code for SuperMethodReferenceArguments ------------------------

	/**
	 * @return the first SuperMethodReferenceArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceArguments getFirstSuperMethodReferenceArguments();

	/**
	 * Creates a new SuperMethodReferenceArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceArguments createSuperMethodReferenceArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReference alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for SuperMethodReferenceQualifier ------------------------

	/**
	 * @return the first SuperMethodReferenceQualifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceQualifier getFirstSuperMethodReferenceQualifier();

	/**
	 * Creates a new SuperMethodReferenceQualifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceQualifier createSuperMethodReferenceQualifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReference alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for SwitchCase ------------------------

	/**
	 * @return the first SwitchCase vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchCase getFirstSwitchCase();

	/**
	 * Creates a new SwitchCase vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchCase createSwitchCase();

	// ------------------------ Code for SwitchStatement ------------------------

	/**
	 * @return the first SwitchStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatement getFirstSwitchStatement();

	/**
	 * Creates a new SwitchStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatement createSwitchStatement();

	// ------------------------ Code for SwitchStatementStatements ------------------------

	/**
	 * @return the first SwitchStatementStatements edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatementStatements getFirstSwitchStatementStatements();

	/**
	 * Creates a new SwitchStatementStatements edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatementStatements createSwitchStatementStatements(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for SynchronizedStatement ------------------------

	/**
	 * @return the first SynchronizedStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatement getFirstSynchronizedStatement();

	/**
	 * Creates a new SynchronizedStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatement createSynchronizedStatement();

	// ------------------------ Code for SynchronizedStatementBlock ------------------------

	/**
	 * @return the first SynchronizedStatementBlock edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatementBlock getFirstSynchronizedStatementBlock();

	/**
	 * Creates a new SynchronizedStatementBlock edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatementBlock createSynchronizedStatementBlock(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block omega);

	// ------------------------ Code for TagElement ------------------------

	/**
	 * @return the first TagElement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement getFirstTagElement();

	/**
	 * Creates a new TagElement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement createTagElement();

	// ------------------------ Code for TagElementFragments1 ------------------------

	/**
	 * @return the first TagElementFragments1 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments1 getFirstTagElementFragments1();

	/**
	 * Creates a new TagElementFragments1 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments1 createTagElementFragments1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TextElement omega);

	// ------------------------ Code for TagElementFragments2 ------------------------

	/**
	 * @return the first TagElementFragments2 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments2 getFirstTagElementFragments2();

	/**
	 * Creates a new TagElementFragments2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments2 createTagElementFragments2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for TagElementFragments3 ------------------------

	/**
	 * @return the first TagElementFragments3 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments3 getFirstTagElementFragments3();

	/**
	 * Creates a new TagElementFragments3 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments3 createTagElementFragments3(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef omega);

	// ------------------------ Code for TagElementFragments4 ------------------------

	/**
	 * @return the first TagElementFragments4 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments4 getFirstTagElementFragments4();

	/**
	 * Creates a new TagElementFragments4 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments4 createTagElementFragments4(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRef omega);

	// ------------------------ Code for TagElementFragments5 ------------------------

	/**
	 * @return the first TagElementFragments5 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments5 getFirstTagElementFragments5();

	/**
	 * Creates a new TagElementFragments5 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments5 createTagElementFragments5(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement omega);

	// ------------------------ Code for TextElement ------------------------

	/**
	 * @return the first TextElement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TextElement getFirstTextElement();

	/**
	 * Creates a new TextElement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TextElement createTextElement();

	// ------------------------ Code for ThisExpression ------------------------

	/**
	 * @return the first ThisExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpression getFirstThisExpression();

	/**
	 * Creates a new ThisExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpression createThisExpression();

	// ------------------------ Code for ThisExpressionQualifier ------------------------

	/**
	 * @return the first ThisExpressionQualifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpressionQualifier getFirstThisExpressionQualifier();

	/**
	 * Creates a new ThisExpressionQualifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpressionQualifier createThisExpressionQualifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name omega);

	// ------------------------ Code for ThrowStatement ------------------------

	/**
	 * @return the first ThrowStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThrowStatement getFirstThrowStatement();

	/**
	 * Creates a new ThrowStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThrowStatement createThrowStatement();

	// ------------------------ Code for TryStatement ------------------------

	/**
	 * @return the first TryStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement getFirstTryStatement();

	/**
	 * Creates a new TryStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement createTryStatement();

	// ------------------------ Code for TryStatementBody ------------------------

	/**
	 * @return the first TryStatementBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementBody getFirstTryStatementBody();

	/**
	 * Creates a new TryStatementBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementBody createTryStatementBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for TryStatementCatchClauses ------------------------

	/**
	 * @return the first TryStatementCatchClauses edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementCatchClauses getFirstTryStatementCatchClauses();

	/**
	 * Creates a new TryStatementCatchClauses edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementCatchClauses createTryStatementCatchClauses(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClause omega);

	// ------------------------ Code for TryStatementFinally ------------------------

	/**
	 * @return the first TryStatementFinally edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementFinally getFirstTryStatementFinally();

	/**
	 * Creates a new TryStatementFinally edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementFinally createTryStatementFinally(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block omega);

	// ------------------------ Code for TryStatementResources ------------------------

	/**
	 * @return the first TryStatementResources edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementResources getFirstTryStatementResources();

	/**
	 * Creates a new TryStatementResources edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementResources createTryStatementResources(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression omega);

	// ------------------------ Code for Type ------------------------

	/**
	 * @return the first Type vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type getFirstType();

	// ------------------------ Code for TypeAccess ------------------------

	/**
	 * @return the first TypeAccess edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess getFirstTypeAccess();

	/**
	 * Creates a new TypeAccess edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess createTypeAccess(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration omega);

	// ------------------------ Code for TypeDeclaration ------------------------

	/**
	 * @return the first TypeDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration getFirstTypeDeclaration();

	/**
	 * Creates a new TypeDeclaration vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration createTypeDeclaration();

	// ------------------------ Code for TypeDeclarationAnnotation ------------------------

	/**
	 * @return the first TypeDeclarationAnnotation edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationAnnotation getFirstTypeDeclarationAnnotation();

	/**
	 * Creates a new TypeDeclarationAnnotation edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationAnnotation createTypeDeclarationAnnotation(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for TypeDeclarationBodyDeclarations1 ------------------------

	/**
	 * @return the first TypeDeclarationBodyDeclarations1 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationBodyDeclarations1 getFirstTypeDeclarationBodyDeclarations1();

	/**
	 * Creates a new TypeDeclarationBodyDeclarations1 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationBodyDeclarations1 createTypeDeclarationBodyDeclarations1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration omega);

	// ------------------------ Code for TypeDeclarationModifiers ------------------------

	/**
	 * @return the first TypeDeclarationModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationModifiers getFirstTypeDeclarationModifiers();

	/**
	 * Creates a new TypeDeclarationModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationModifiers createTypeDeclarationModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for TypeDeclarationStatement ------------------------

	/**
	 * @return the first TypeDeclarationStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationStatement getFirstTypeDeclarationStatement();

	/**
	 * Creates a new TypeDeclarationStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationStatement createTypeDeclarationStatement();

	// ------------------------ Code for TypeDeclarationSuperInterfaceTypes ------------------------

	/**
	 * @return the first TypeDeclarationSuperInterfaceTypes edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperInterfaceTypes getFirstTypeDeclarationSuperInterfaceTypes();

	/**
	 * Creates a new TypeDeclarationSuperInterfaceTypes edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperInterfaceTypes createTypeDeclarationSuperInterfaceTypes(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for TypeDeclarationSuperclassType ------------------------

	/**
	 * @return the first TypeDeclarationSuperclassType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperclassType getFirstTypeDeclarationSuperclassType();

	/**
	 * Creates a new TypeDeclarationSuperclassType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperclassType createTypeDeclarationSuperclassType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for TypeDeclarationTypeParameters ------------------------

	/**
	 * @return the first TypeDeclarationTypeParameters edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationTypeParameters getFirstTypeDeclarationTypeParameters();

	/**
	 * Creates a new TypeDeclarationTypeParameters edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationTypeParameters createTypeDeclarationTypeParameters(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter omega);

	// ------------------------ Code for TypeLiteral ------------------------

	/**
	 * @return the first TypeLiteral vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteral getFirstTypeLiteral();

	/**
	 * Creates a new TypeLiteral vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteral createTypeLiteral();

	// ------------------------ Code for TypeLiteralType ------------------------

	/**
	 * @return the first TypeLiteralType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteralType getFirstTypeLiteralType();

	/**
	 * Creates a new TypeLiteralType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteralType createTypeLiteralType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteral alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for TypeMethodReference ------------------------

	/**
	 * @return the first TypeMethodReference vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReference getFirstTypeMethodReference();

	/**
	 * Creates a new TypeMethodReference vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReference createTypeMethodReference();

	// ------------------------ Code for TypeMethodReferenceArguments ------------------------

	/**
	 * @return the first TypeMethodReferenceArguments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceArguments getFirstTypeMethodReferenceArguments();

	/**
	 * Creates a new TypeMethodReferenceArguments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceArguments createTypeMethodReferenceArguments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReference alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for TypeMethodReferenceType ------------------------

	/**
	 * @return the first TypeMethodReferenceType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceType getFirstTypeMethodReferenceType();

	/**
	 * Creates a new TypeMethodReferenceType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceType createTypeMethodReferenceType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReference alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for TypeParameter ------------------------

	/**
	 * @return the first TypeParameter vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter getFirstTypeParameter();

	/**
	 * Creates a new TypeParameter vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter createTypeParameter();

	// ------------------------ Code for TypeParameterName ------------------------

	/**
	 * @return the first TypeParameterName edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterName getFirstTypeParameterName();

	/**
	 * Creates a new TypeParameterName edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterName createTypeParameterName(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName omega);

	// ------------------------ Code for TypeParameterType ------------------------

	/**
	 * @return the first TypeParameterType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterType getFirstTypeParameterType();

	/**
	 * Creates a new TypeParameterType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterType createTypeParameterType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for UnionType ------------------------

	/**
	 * @return the first UnionType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionType getFirstUnionType();

	/**
	 * Creates a new UnionType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionType createUnionType();

	// ------------------------ Code for UnionTypeTypes ------------------------

	/**
	 * @return the first UnionTypeTypes edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionTypeTypes getFirstUnionTypeTypes();

	/**
	 * Creates a new UnionTypeTypes edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionTypeTypes createUnionTypeTypes(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for VariableDeclaration ------------------------

	/**
	 * @return the first VariableDeclaration vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration getFirstVariableDeclaration();

	// ------------------------ Code for VariableDeclarationExpression ------------------------

	/**
	 * @return the first VariableDeclarationExpression vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression getFirstVariableDeclarationExpression();

	/**
	 * Creates a new VariableDeclarationExpression vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression createVariableDeclarationExpression();

	// ------------------------ Code for VariableDeclarationExpressionAnnotation ------------------------

	/**
	 * @return the first VariableDeclarationExpressionAnnotation edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionAnnotation getFirstVariableDeclarationExpressionAnnotation();

	/**
	 * Creates a new VariableDeclarationExpressionAnnotation edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionAnnotation createVariableDeclarationExpressionAnnotation(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation omega);

	// ------------------------ Code for VariableDeclarationExpressionFragments ------------------------

	/**
	 * @return the first VariableDeclarationExpressionFragments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionFragments getFirstVariableDeclarationExpressionFragments();

	/**
	 * Creates a new VariableDeclarationExpressionFragments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionFragments createVariableDeclarationExpressionFragments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment omega);

	// ------------------------ Code for VariableDeclarationExpressionModifiers ------------------------

	/**
	 * @return the first VariableDeclarationExpressionModifiers edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionModifiers getFirstVariableDeclarationExpressionModifiers();

	/**
	 * Creates a new VariableDeclarationExpressionModifiers edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionModifiers createVariableDeclarationExpressionModifiers(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for VariableDeclarationExpressionType ------------------------

	/**
	 * @return the first VariableDeclarationExpressionType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionType getFirstVariableDeclarationExpressionType();

	/**
	 * Creates a new VariableDeclarationExpressionType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionType createVariableDeclarationExpressionType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for VariableDeclarationFragment ------------------------

	/**
	 * @return the first VariableDeclarationFragment vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment getFirstVariableDeclarationFragment();

	/**
	 * Creates a new VariableDeclarationFragment vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment createVariableDeclarationFragment();

	// ------------------------ Code for VariableDeclarationFragmentInitializer ------------------------

	/**
	 * @return the first VariableDeclarationFragmentInitializer edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragmentInitializer getFirstVariableDeclarationFragmentInitializer();

	/**
	 * Creates a new VariableDeclarationFragmentInitializer edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragmentInitializer createVariableDeclarationFragmentInitializer(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression omega);

	// ------------------------ Code for VariableDeclarationStatement ------------------------

	/**
	 * @return the first VariableDeclarationStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatement getFirstVariableDeclarationStatement();

	/**
	 * Creates a new VariableDeclarationStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatement createVariableDeclarationStatement();

	// ------------------------ Code for VariableDeclarationStatementFragments ------------------------

	/**
	 * @return the first VariableDeclarationStatementFragments edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementFragments getFirstVariableDeclarationStatementFragments();

	/**
	 * Creates a new VariableDeclarationStatementFragments edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementFragments createVariableDeclarationStatementFragments(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment omega);

	// ------------------------ Code for VariableDeclarationStatementModifier ------------------------

	/**
	 * @return the first VariableDeclarationStatementModifier edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementModifier getFirstVariableDeclarationStatementModifier();

	/**
	 * Creates a new VariableDeclarationStatementModifier edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementModifier createVariableDeclarationStatementModifier(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier omega);

	// ------------------------ Code for VariableDeclarationStatementType ------------------------

	/**
	 * @return the first VariableDeclarationStatementType edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementType getFirstVariableDeclarationStatementType();

	/**
	 * Creates a new VariableDeclarationStatementType edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementType createVariableDeclarationStatementType(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type omega);

	// ------------------------ Code for WhileStatement ------------------------

	/**
	 * @return the first WhileStatement vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatement getFirstWhileStatement();

	/**
	 * Creates a new WhileStatement vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatement createWhileStatement();

	// ------------------------ Code for WhileStatementBody ------------------------

	/**
	 * @return the first WhileStatementBody edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatementBody getFirstWhileStatementBody();

	/**
	 * Creates a new WhileStatementBody edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatementBody createWhileStatementBody(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatement alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement omega);

	// ------------------------ Code for WildcardType ------------------------

	/**
	 * @return the first WildcardType vertex in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardType getFirstWildcardType();

	/**
	 * Creates a new WildcardType vertex in this graph.
	 *
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardType createWildcardType();

	// ------------------------ Code for WildcardTypeBound1 ------------------------

	/**
	 * @return the first WildcardTypeBound1 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardTypeBound1 getFirstWildcardTypeBound1();

	/**
	 * Creates a new WildcardTypeBound1 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardTypeBound1 createWildcardTypeBound1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedType omega);

	// ------------------------ Code for WildcardTypeBound2 ------------------------

	/**
	 * @return the first WildcardTypeBound2 edge in this graph
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardTypeBound2 getFirstWildcardTypeBound2();

	/**
	 * Creates a new WildcardTypeBound2 edge in this graph.
	 *
	 * @param alpha the start vertex of the edge
	 * @param omega the target vertex of the edge
	*/
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardTypeBound2 createWildcardTypeBound2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardType alpha, de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType omega);

	/**
	 * @return an Iterable for all edges of this graph that are of type Child or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Child> getChildEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type Access or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Access> getAccessEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeDeclarationAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationAnnotations> getAnnotationTypeDeclarationAnnotationsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeDeclarationBodyDeclarations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationBodyDeclarations> getAnnotationTypeDeclarationBodyDeclarationsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeDeclarationModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationModifiers> getAnnotationTypeDeclarationModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeDeclarationName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclarationName> getAnnotationTypeDeclarationNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeMemberDeclarationAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationAnnotations> getAnnotationTypeMemberDeclarationAnnotationsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeMemberDeclarationDefault or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationDefault> getAnnotationTypeMemberDeclarationDefaultEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeMemberDeclarationModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationModifiers> getAnnotationTypeMemberDeclarationModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeMemberDeclarationName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationName> getAnnotationTypeMemberDeclarationNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnnotationTypeMemberDeclarationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationType> getAnnotationTypeMemberDeclarationTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AnonymousClassDeclarationBodyDeclarations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclarationBodyDeclarations> getAnonymousClassDeclarationBodyDeclarationsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ArrayAccessArray or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessArray> getArrayAccessArrayEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ArrayAccessIndex or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessIndex> getArrayAccessIndexEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ArrayCreationDimensions or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationDimensions> getArrayCreationDimensionsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ArrayCreationInitializer or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationInitializer> getArrayCreationInitializerEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ArrayCreationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationType> getArrayCreationTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ArrayInitializerExpressions or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializerExpressions> getArrayInitializerExpressionsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ArrayTypeComponentType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayTypeComponentType> getArrayTypeComponentTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AssertStatementMessage or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatementMessage> getAssertStatementMessageEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AssignmentLeftHandSide or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentLeftHandSide> getAssignmentLeftHandSideEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type AssignmentRightHandSide or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentRightHandSide> getAssignmentRightHandSideEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type BlockStatements or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BlockStatements> getBlockStatementsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type BodyDeclarationJavadoc or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclarationJavadoc> getBodyDeclarationJavadocEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type CastExpressionType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpressionType> getCastExpressionTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type CatchClauseBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClauseBody> getCatchClauseBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type CatchClauseException or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClauseException> getCatchClauseExceptionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ClassInstanceCreationAnonymousClassDecl or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationAnonymousClassDecl> getClassInstanceCreationAnonymousClassDeclEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ClassInstanceCreationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationArguments> getClassInstanceCreationArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ClassInstanceCreationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationType> getClassInstanceCreationTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type CompilationUnitImports or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitImports> getCompilationUnitImportsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type CompilationUnitPackage or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitPackage> getCompilationUnitPackageEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type CompilationUnitTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnitTypes> getCompilationUnitTypesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ConditionalExpressionElseExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionElseExpression> getConditionalExpressionElseExpressionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ConditionalExpressionThenExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionThenExpression> getConditionalExpressionThenExpressionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ConstructorInvocationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationArguments> getConstructorInvocationArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ConstructorInvocationTypeArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationTypeArguments> getConstructorInvocationTypeArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type CreationReferenceTypeArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceTypeArguments> getCreationReferenceTypeArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type CreationReferenceType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceType> getCreationReferenceTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type DimensionAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DimensionAnnotations> getDimensionAnnotationsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type DoStatementBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatementBody> getDoStatementBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ElementExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression> getElementExpressionEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnhancedForStatementBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatementBody> getEnhancedForStatementBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnhancedForStatementParameter or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatementParameter> getEnhancedForStatementParameterEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumConstantDeclarationAnonymousClassDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnonymousClassDeclaration> getEnumConstantDeclarationAnonymousClassDeclarationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumConstantDeclarationAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationAnnotations> getEnumConstantDeclarationAnnotationsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumConstantDeclarationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationArguments> getEnumConstantDeclarationArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumConstantDeclarationModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationModifiers> getEnumConstantDeclarationModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumConstantDeclarationName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationName> getEnumConstantDeclarationNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumDeclarationAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationAnnotations> getEnumDeclarationAnnotationsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumDeclarationBodyDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationBodyDeclaration> getEnumDeclarationBodyDeclarationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumDeclarationEnumConstants or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationEnumConstants> getEnumDeclarationEnumConstantsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumDeclarationModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationModifiers> getEnumDeclarationModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumDeclarationName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationName> getEnumDeclarationNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type EnumDeclarationSuperInterfaceTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationSuperInterfaceTypes> getEnumDeclarationSuperInterfaceTypesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ExpressionMethodReferenceArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceArguments> getExpressionMethodReferenceArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ExpressionMethodReferenceName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceName> getExpressionMethodReferenceNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type FieldAccessName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccessName> getFieldAccessNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type FieldDeclarationAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationAnnotation> getFieldDeclarationAnnotationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type FieldDeclarationFragments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationFragments> getFieldDeclarationFragmentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type FieldDeclarationModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationModifiers> getFieldDeclarationModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type FieldDeclarationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationType> getFieldDeclarationTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ForStatementBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementBody> getForStatementBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ForStatementInitializers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementInitializers> getForStatementInitializersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ForStatementUpdaters or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementUpdaters> getForStatementUpdatersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IfStatementElseStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatementElseStatement> getIfStatementElseStatementEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IfStatementThenStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatementThenStatement> getIfStatementThenStatementEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IJavaProjectFragements or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProjectFragements> getIJavaProjectFragementsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IJavaProjectUnits or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProjectUnits> getIJavaProjectUnitsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type InfixExpressionExtendedOperands or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionExtendedOperands> getInfixExpressionExtendedOperandsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type InfixExpressionLeftOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionLeftOperand> getInfixExpressionLeftOperandEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type InfixExpressionRightOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionRightOperand> getInfixExpressionRightOperandEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type InitializerAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerAnnotation> getInitializerAnnotationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type InitializerBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerBody> getInitializerBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type InitializerModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InitializerModifiers> getInitializerModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IntersectionTypeTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionTypeTypes> getIntersectionTypeTypesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type InstanceofExpressionLeftOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionLeftOperand> getInstanceofExpressionLeftOperandEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type InstanceofExpressionRightOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionRightOperand> getInstanceofExpressionRightOperandEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type IPackageFragmentUnits or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragmentUnits> getIPackageFragmentUnitsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type JavadocTags or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.JavadocTags> getJavadocTagsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type LambdaExpressionBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpressionBody> getLambdaExpressionBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type LambdaExpressionParameters or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpressionParameters> getLambdaExpressionParametersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type LabeledStatementBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementBody> getLabeledStatementBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type LabeledStatementLabel or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatementLabel> getLabeledStatementLabelEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MarkerAnnotationTypeName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotationTypeName> getMarkerAnnotationTypeNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MemberRefName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefName> getMemberRefNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MemberRefQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRefQualifier> getMemberRefQualifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MemberValuePairName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairName> getMemberValuePairNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MemberValuePairValue or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairValue> getMemberValuePairValueEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationAnnotation> getMethodDeclarationAnnotationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationBody> getMethodDeclarationBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationModifiers> getMethodDeclarationModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationParameters or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationParameters> getMethodDeclarationParametersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationReceiverQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverQualifier> getMethodDeclarationReceiverQualifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationReceiverType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverType> getMethodDeclarationReceiverTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationReturnType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReturnType> getMethodDeclarationReturnTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationThrownExceptions or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationThrownExceptions> getMethodDeclarationThrownExceptionsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodDeclarationTypeParameters or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationTypeParameters> getMethodDeclarationTypeParametersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodInvocationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocationArguments> getMethodInvocationArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodRefName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefName> getMethodRefNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodRefParameters or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameters> getMethodRefParametersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodRefQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefQualifier> getMethodRefQualifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodRefParameterName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterName> getMethodRefParameterNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type MethodRefParameterType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterType> getMethodRefParameterTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type NormalAnnotationTypeName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotationTypeName> getNormalAnnotationTypeNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type NormalAnnotationValues or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotationValues> getNormalAnnotationValuesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ParameterizedTypeType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeType> getParameterizedTypeTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ParameterizedTypeTypeArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeTypeArguments> getParameterizedTypeTypeArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type PostfixExpressionOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpressionOperand> getPostfixExpressionOperandEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type PrefixExpressionOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpressionOperand> getPrefixExpressionOperandEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type QualifiedNameName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameName> getQualifiedNameNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type QualifiedNameQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedNameQualifier> getQualifiedNameQualifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SimpleNameValues or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleNameValues> getSimpleNameValuesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SimpleTypeAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeAnnotation> getSimpleTypeAnnotationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SimpleTypeName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleTypeName> getSimpleTypeNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SingleMemberAnnotationTypeName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationTypeName> getSingleMemberAnnotationTypeNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SingleMemberAnnotationValue or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationValue> getSingleMemberAnnotationValueEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SingleVariableDeclarationAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationAnnotation> getSingleVariableDeclarationAnnotationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SingleVariableDeclarationExtraDimensions or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationExtraDimensions> getSingleVariableDeclarationExtraDimensionsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SingleVariableDeclarationInitializer or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationInitializer> getSingleVariableDeclarationInitializerEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SingleVariableDeclarationModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationModifiers> getSingleVariableDeclarationModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SingleVariableDeclarationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationType> getSingleVariableDeclarationTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SingleVariableDeclarationVarargsAnnotations or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationVarargsAnnotations> getSingleVariableDeclarationVarargsAnnotationsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SuperConstructorInvocationArgument or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationArgument> getSuperConstructorInvocationArgumentEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SuperConstructorInvocationTypeArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationTypeArguments> getSuperConstructorInvocationTypeArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SuperFieldAccessName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessName> getSuperFieldAccessNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SuperFieldAccessQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccessQualifier> getSuperFieldAccessQualifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SuperMethodInvocationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationArguments> getSuperMethodInvocationArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SuperMethodInvocationQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationQualifier> getSuperMethodInvocationQualifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SuperMethodReferenceArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceArguments> getSuperMethodReferenceArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SuperMethodReferenceQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceQualifier> getSuperMethodReferenceQualifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SwitchStatementStatements or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatementStatements> getSwitchStatementStatementsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type SynchronizedStatementBlock or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatementBlock> getSynchronizedStatementBlockEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TagElementFragments1 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments1> getTagElementFragments1Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TagElementFragments2 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments2> getTagElementFragments2Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TagElementFragments3 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments3> getTagElementFragments3Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TagElementFragments4 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments4> getTagElementFragments4Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TagElementFragments5 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElementFragments5> getTagElementFragments5Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ThisExpressionQualifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpressionQualifier> getThisExpressionQualifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TryStatementBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementBody> getTryStatementBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TryStatementCatchClauses or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementCatchClauses> getTryStatementCatchClausesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TryStatementFinally or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementFinally> getTryStatementFinallyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TryStatementResources or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatementResources> getTryStatementResourcesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeDeclarationAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationAnnotation> getTypeDeclarationAnnotationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeDeclarationBodyDeclarations1 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationBodyDeclarations1> getTypeDeclarationBodyDeclarations1Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeDeclarationModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationModifiers> getTypeDeclarationModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeDeclarationSuperclassType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperclassType> getTypeDeclarationSuperclassTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeDeclarationSuperInterfaceTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperInterfaceTypes> getTypeDeclarationSuperInterfaceTypesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeDeclarationTypeParameters or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationTypeParameters> getTypeDeclarationTypeParametersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeLiteralType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteralType> getTypeLiteralTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeMethodReferenceArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceArguments> getTypeMethodReferenceArgumentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeMethodReferenceType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceType> getTypeMethodReferenceTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeParameterName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterName> getTypeParameterNameEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeParameterType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterType> getTypeParameterTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type UnionTypeTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionTypeTypes> getUnionTypeTypesEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type VariableDeclarationExpressionAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionAnnotation> getVariableDeclarationExpressionAnnotationEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type VariableDeclarationExpressionFragments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionFragments> getVariableDeclarationExpressionFragmentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type VariableDeclarationExpressionModifiers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionModifiers> getVariableDeclarationExpressionModifiersEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type VariableDeclarationExpressionType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionType> getVariableDeclarationExpressionTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type VariableDeclarationFragmentInitializer or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragmentInitializer> getVariableDeclarationFragmentInitializerEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type VariableDeclarationStatementFragments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementFragments> getVariableDeclarationStatementFragmentsEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type VariableDeclarationStatementModifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementModifier> getVariableDeclarationStatementModifierEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type VariableDeclarationStatementType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementType> getVariableDeclarationStatementTypeEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type WhileStatementBody or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatementBody> getWhileStatementBodyEdges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type WildcardTypeBound1 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardTypeBound1> getWildcardTypeBound1Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type WildcardTypeBound2 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardTypeBound2> getWildcardTypeBound2Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ExpressionAccess1 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1> getExpressionAccess1Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type ExpressionAccess2 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2> getExpressionAccess2Edges();
	

	/**
	 * @return an Iterable for all edges of this graph that are of type TypeAccess or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess> getTypeAccessEdges();
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Assignment or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Assignment> getAssignmentVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Assignment> getAssignmentVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Assignment> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type WildcardType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardType> getWildcardTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardType> getWildcardTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WildcardType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Javadoc or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Javadoc> getJavadocVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Javadoc> getJavadocVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Javadoc> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PrimitiveType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrimitiveType> getPrimitiveTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrimitiveType> getPrimitiveTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrimitiveType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type BodyDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> getBodyDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> getBodyDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type UnionType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionType> getUnionTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionType> getUnionTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type LambdaExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpression> getLambdaExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpression> getLambdaExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LambdaExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TypeDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration> getTypeDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration> getTypeDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type EmptyStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EmptyStatement> getEmptyStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EmptyStatement> getEmptyStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EmptyStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Expression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> getExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> getExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Node or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node> getNodeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node> getNodeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PrefixExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpression> getPrefixExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpression> getPrefixExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type VariableDeclarationExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression> getVariableDeclarationExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression> getVariableDeclarationExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type IfStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatement> getIfStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatement> getIfStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IfStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ArrayAccess or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccess> getArrayAccessVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccess> getArrayAccessVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccess> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ArrayInitializer or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializer> getArrayInitializerVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializer> getArrayInitializerVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializer> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PackageDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PackageDeclaration> getPackageDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PackageDeclaration> getPackageDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PackageDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type NumberLiteral or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NumberLiteral> getNumberLiteralVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NumberLiteral> getNumberLiteralVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NumberLiteral> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type CreationReference or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReference> getCreationReferenceVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReference> getCreationReferenceVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReference> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Dimension or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Dimension> getDimensionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Dimension> getDimensionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Dimension> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MethodReference or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodReference> getMethodReferenceVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodReference> getMethodReferenceVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodReference> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type IntersectionType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionType> getIntersectionTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionType> getIntersectionTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SimpleName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName> getSimpleNameVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName> getSimpleNameVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleName> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Element or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element> getElementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element> getElementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MemberRef or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRef> getMemberRefVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRef> getMemberRefVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberRef> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type VariableDeclarationFragment or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment> getVariableDeclarationFragmentVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment> getVariableDeclarationFragmentVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragment> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ReturnStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ReturnStatement> getReturnStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ReturnStatement> getReturnStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ReturnStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type LabeledStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatement> getLabeledStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatement> getLabeledStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.LabeledStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TextElement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TextElement> getTextElementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TextElement> getTextElementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TextElement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ForStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatement> getForStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatement> getForStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ExpressionStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionStatement> getExpressionStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionStatement> getExpressionStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ClassInstanceCreation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreation> getClassInstanceCreationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreation> getClassInstanceCreationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type EnumDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration> getEnumDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration> getEnumDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type FieldAccess or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccess> getFieldAccessVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccess> getFieldAccessVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldAccess> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Block or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block> getBlockVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block> getBlockVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Block> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type StringLiteral or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.StringLiteral> getStringLiteralVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.StringLiteral> getStringLiteralVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.StringLiteral> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Modifier or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier> getModifierVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier> getModifierVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Modifier> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type EnumConstantDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration> getEnumConstantDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration> getEnumConstantDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type NullLiteral or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NullLiteral> getNullLiteralVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NullLiteral> getNullLiteralVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NullLiteral> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AnnotatableType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotatableType> getAnnotatableTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotatableType> getAnnotatableTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotatableType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type VariableDeclarationStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatement> getVariableDeclarationStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatement> getVariableDeclarationStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SuperMethodInvocation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocation> getSuperMethodInvocationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocation> getSuperMethodInvocationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AssertStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatement> getAssertStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatement> getAssertStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SynchronizedStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatement> getSynchronizedStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatement> getSynchronizedStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SynchronizedStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TryStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement> getTryStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement> getTryStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TryStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Comment or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Comment> getCommentVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Comment> getCommentVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Comment> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SuperFieldAccess or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccess> getSuperFieldAccessVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccess> getSuperFieldAccessVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperFieldAccess> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type VariableDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> getVariableDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> getVariableDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AnonymousClassDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclaration> getAnonymousClassDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclaration> getAnonymousClassDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnonymousClassDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ArrayCreation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreation> getArrayCreationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreation> getArrayCreationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type InfixExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpression> getInfixExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpression> getInfixExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AnnotationTypeMemberDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration> getAnnotationTypeMemberDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration> getAnnotationTypeMemberDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ConditionalExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpression> getConditionalExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpression> getConditionalExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type IPackageFragment or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragment> getIPackageFragmentVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragment> getIPackageFragmentVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IPackageFragment> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TypeDeclarationStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationStatement> getTypeDeclarationStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationStatement> getTypeDeclarationStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type PostfixExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpression> getPostfixExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpression> getPostfixExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PostfixExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ImportDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ImportDeclaration> getImportDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ImportDeclaration> getImportDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ImportDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type CastExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpression> getCastExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpression> getCastExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ThisExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpression> getThisExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpression> getThisExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThisExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type IJavaProject or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProject> getIJavaProjectVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProject> getIJavaProjectVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IJavaProject> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MethodRef or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef> getMethodRefVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef> getMethodRefVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRef> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type CharacterLiteral or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CharacterLiteral> getCharacterLiteralVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CharacterLiteral> getCharacterLiteralVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CharacterLiteral> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Name or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name> getNameVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name> getNameVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Name> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type WhileStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatement> getWhileStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatement> getWhileStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.WhileStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type QualifiedType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedType> getQualifiedTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedType> getQualifiedTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MemberValuePair or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePair> getMemberValuePairVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePair> getMemberValuePairVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePair> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TypeParameter or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter> getTypeParameterVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter> getTypeParameterVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameter> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TagElement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement> getTagElementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement> getTagElementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TagElement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MethodInvocation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocation> getMethodInvocationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocation> getMethodInvocationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SuperMethodReference or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReference> getSuperMethodReferenceVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReference> getSuperMethodReferenceVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReference> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SwitchStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatement> getSwitchStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatement> getSwitchStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SimpleType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType> getSimpleTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType> getSimpleTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SimpleType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type BreakStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BreakStatement> getBreakStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BreakStatement> getBreakStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BreakStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Annotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation> getAnnotationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation> getAnnotationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Annotation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Type or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type> getTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type> getTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type FieldDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration> getFieldDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration> getFieldDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ContinueStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ContinueStatement> getContinueStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ContinueStatement> getContinueStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ContinueStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ThrowStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThrowStatement> getThrowStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThrowStatement> getThrowStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ThrowStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Statement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement> getStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement> getStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Statement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type InstanceofExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpression> getInstanceofExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpression> getInstanceofExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ParenthesizedExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParenthesizedExpression> getParenthesizedExpressionVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParenthesizedExpression> getParenthesizedExpressionVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParenthesizedExpression> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ExpressionMethodReference or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReference> getExpressionMethodReferenceVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReference> getExpressionMethodReferenceVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReference> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AbstractTypeDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AbstractTypeDeclaration> getAbstractTypeDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AbstractTypeDeclaration> getAbstractTypeDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AbstractTypeDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type BooleanLiteral or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BooleanLiteral> getBooleanLiteralVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BooleanLiteral> getBooleanLiteralVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BooleanLiteral> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type AnnotationTypeDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration> getAnnotationTypeDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration> getAnnotationTypeDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type NameQualifiedType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NameQualifiedType> getNameQualifiedTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NameQualifiedType> getNameQualifiedTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NameQualifiedType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SuperConstructorInvocation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocation> getSuperConstructorInvocationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocation> getSuperConstructorInvocationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type DoStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatement> getDoStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatement> getDoStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.DoStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SingleMemberAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotation> getSingleMemberAnnotationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotation> getSingleMemberAnnotationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MethodRefParameter or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameter> getMethodRefParameterVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameter> getMethodRefParameterVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameter> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SingleVariableDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration> getSingleVariableDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration> getSingleVariableDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MarkerAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotation> getMarkerAnnotationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotation> getMarkerAnnotationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MarkerAnnotation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type SwitchCase or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchCase> getSwitchCaseVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchCase> getSwitchCaseVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SwitchCase> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TypeMethodReference or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReference> getTypeMethodReferenceVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReference> getTypeMethodReferenceVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReference> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type Initializer or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Initializer> getInitializerVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Initializer> getInitializerVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Initializer> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type MethodDeclaration or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration> getMethodDeclarationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration> getMethodDeclarationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclaration> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ArrayType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayType> getArrayTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayType> getArrayTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ParameterizedType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedType> getParameterizedTypeVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedType> getParameterizedTypeVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedType> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type TypeLiteral or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteral> getTypeLiteralVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteral> getTypeLiteralVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteral> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type CompilationUnit or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit> getCompilationUnitVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit> getCompilationUnitVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CompilationUnit> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type QualifiedName or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedName> getQualifiedNameVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedName> getQualifiedNameVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.QualifiedName> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type NormalAnnotation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotation> getNormalAnnotationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotation> getNormalAnnotationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.NormalAnnotation> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type CatchClause or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClause> getCatchClauseVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClause> getCatchClauseVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CatchClause> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type EnhancedForStatement or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatement> getEnhancedForStatementVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatement> getEnhancedForStatementVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnhancedForStatement> filter);
	

	/**
	 * @return an Iterable for all vertices of this graph that are of type ConstructorInvocation or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocation> getConstructorInvocationVertices();
	
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocation> getConstructorInvocationVertices(de.uni_koblenz.jgralab.VertexFilter<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocation> filter);
	
}
