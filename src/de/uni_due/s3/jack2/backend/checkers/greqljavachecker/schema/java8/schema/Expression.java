/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Expression extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element, de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Java8Schema.instance().getGraphClass().getVertexClass("Expression");

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element getNextElement();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression getNextExpression();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node getNextNode();

	/**
	 * @return the first edge of class InfixExpressionLeftOperand at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionLeftOperand getFirstInfixExpressionLeftOperandIncidence();

	/**
	 * @return the first edge of class InfixExpressionLeftOperand at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionLeftOperand getFirstInfixExpressionLeftOperandIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SingleVariableDeclarationInitializer at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationInitializer getFirstSingleVariableDeclarationInitializerIncidence();

	/**
	 * @return the first edge of class SingleVariableDeclarationInitializer at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationInitializer getFirstSingleVariableDeclarationInitializerIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SingleMemberAnnotationValue at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationValue getFirstSingleMemberAnnotationValueIncidence();

	/**
	 * @return the first edge of class SingleMemberAnnotationValue at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationValue getFirstSingleMemberAnnotationValueIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AssignmentRightHandSide at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentRightHandSide getFirstAssignmentRightHandSideIncidence();

	/**
	 * @return the first edge of class AssignmentRightHandSide at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentRightHandSide getFirstAssignmentRightHandSideIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SuperMethodInvocationArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationArguments getFirstSuperMethodInvocationArgumentsIncidence();

	/**
	 * @return the first edge of class SuperMethodInvocationArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationArguments getFirstSuperMethodInvocationArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MemberValuePairValue at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairValue getFirstMemberValuePairValueIncidence();

	/**
	 * @return the first edge of class MemberValuePairValue at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairValue getFirstMemberValuePairValueIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ArrayCreationDimensions at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationDimensions getFirstArrayCreationDimensionsIncidence();

	/**
	 * @return the first edge of class ArrayCreationDimensions at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationDimensions getFirstArrayCreationDimensionsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ConditionalExpressionElseExpression at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionElseExpression getFirstConditionalExpressionElseExpressionIncidence();

	/**
	 * @return the first edge of class ConditionalExpressionElseExpression at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionElseExpression getFirstConditionalExpressionElseExpressionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AssignmentLeftHandSide at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentLeftHandSide getFirstAssignmentLeftHandSideIncidence();

	/**
	 * @return the first edge of class AssignmentLeftHandSide at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentLeftHandSide getFirstAssignmentLeftHandSideIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class EnumConstantDeclarationArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationArguments getFirstEnumConstantDeclarationArgumentsIncidence();

	/**
	 * @return the first edge of class EnumConstantDeclarationArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationArguments getFirstEnumConstantDeclarationArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SuperConstructorInvocationArgument at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationArgument getFirstSuperConstructorInvocationArgumentIncidence();

	/**
	 * @return the first edge of class SuperConstructorInvocationArgument at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationArgument getFirstSuperConstructorInvocationArgumentIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class PrefixExpressionOperand at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpressionOperand getFirstPrefixExpressionOperandIncidence();

	/**
	 * @return the first edge of class PrefixExpressionOperand at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpressionOperand getFirstPrefixExpressionOperandIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class InfixExpressionRightOperand at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionRightOperand getFirstInfixExpressionRightOperandIncidence();

	/**
	 * @return the first edge of class InfixExpressionRightOperand at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionRightOperand getFirstInfixExpressionRightOperandIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AnnotationTypeMemberDeclarationDefault at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationDefault getFirstAnnotationTypeMemberDeclarationDefaultIncidence();

	/**
	 * @return the first edge of class AnnotationTypeMemberDeclarationDefault at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationDefault getFirstAnnotationTypeMemberDeclarationDefaultIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AssertStatementMessage at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatementMessage getFirstAssertStatementMessageIncidence();

	/**
	 * @return the first edge of class AssertStatementMessage at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatementMessage getFirstAssertStatementMessageIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ArrayAccessIndex at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessIndex getFirstArrayAccessIndexIncidence();

	/**
	 * @return the first edge of class ArrayAccessIndex at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessIndex getFirstArrayAccessIndexIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ElementExpression at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression getFirstElementExpressionIncidence();

	/**
	 * @return the first edge of class ElementExpression at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression getFirstElementExpressionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ConditionalExpressionThenExpression at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionThenExpression getFirstConditionalExpressionThenExpressionIncidence();

	/**
	 * @return the first edge of class ConditionalExpressionThenExpression at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionThenExpression getFirstConditionalExpressionThenExpressionIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ForStatementInitializers at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementInitializers getFirstForStatementInitializersIncidence();

	/**
	 * @return the first edge of class ForStatementInitializers at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementInitializers getFirstForStatementInitializersIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ArrayAccessArray at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessArray getFirstArrayAccessArrayIncidence();

	/**
	 * @return the first edge of class ArrayAccessArray at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessArray getFirstArrayAccessArrayIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class InfixExpressionExtendedOperands at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionExtendedOperands getFirstInfixExpressionExtendedOperandsIncidence();

	/**
	 * @return the first edge of class InfixExpressionExtendedOperands at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionExtendedOperands getFirstInfixExpressionExtendedOperandsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ArrayInitializerExpressions at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializerExpressions getFirstArrayInitializerExpressionsIncidence();

	/**
	 * @return the first edge of class ArrayInitializerExpressions at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializerExpressions getFirstArrayInitializerExpressionsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ExpressionAccess1 at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1 getFirstExpressionAccess1Incidence();

	/**
	 * @return the first edge of class ExpressionAccess1 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1 getFirstExpressionAccess1Incidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ExpressionAccess2 at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2 getFirstExpressionAccess2Incidence();

	/**
	 * @return the first edge of class ExpressionAccess2 at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2 getFirstExpressionAccess2Incidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class InstanceofExpressionLeftOperand at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionLeftOperand getFirstInstanceofExpressionLeftOperandIncidence();

	/**
	 * @return the first edge of class InstanceofExpressionLeftOperand at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionLeftOperand getFirstInstanceofExpressionLeftOperandIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ConstructorInvocationArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationArguments getFirstConstructorInvocationArgumentsIncidence();

	/**
	 * @return the first edge of class ConstructorInvocationArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationArguments getFirstConstructorInvocationArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class VariableDeclarationFragmentInitializer at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragmentInitializer getFirstVariableDeclarationFragmentInitializerIncidence();

	/**
	 * @return the first edge of class VariableDeclarationFragmentInitializer at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragmentInitializer getFirstVariableDeclarationFragmentInitializerIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodInvocationArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocationArguments getFirstMethodInvocationArgumentsIncidence();

	/**
	 * @return the first edge of class MethodInvocationArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocationArguments getFirstMethodInvocationArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ForStatementUpdaters at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementUpdaters getFirstForStatementUpdatersIncidence();

	/**
	 * @return the first edge of class ForStatementUpdaters at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementUpdaters getFirstForStatementUpdatersIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ClassInstanceCreationArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationArguments getFirstClassInstanceCreationArgumentsIncidence();

	/**
	 * @return the first edge of class ClassInstanceCreationArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationArguments getFirstClassInstanceCreationArgumentsIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>access2</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2 add_access2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration vertex);
		/**
		 * removes all access2 adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> remove_access2();
		/**
		 * removes the given vertex as <code>access2</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_access2(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'access2'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> Iterable<V> get_access2();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclaration> Iterable<V> get_access2(de.uni_koblenz.jgralab.VertexFilter<V> filter);
		/**
		 * adds the given vertex as <code>expression</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression add_expression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex);
		/**
		 * removes all expression adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> remove_expression();
		/**
		 * removes the given vertex as <code>expression</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_expression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'expression'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> Iterable<V> get_expression();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> Iterable<V> get_expression(de.uni_koblenz.jgralab.VertexFilter<V> filter);
		/**
		 * adds the given vertex as <code>access1</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1 add_access1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration vertex);
		/**
		 * removes all access1 adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> remove_access1();
		/**
		 * removes the given vertex as <code>access1</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_access1(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'access1'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> Iterable<V> get_access1();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.BodyDeclaration> Iterable<V> get_access1(de.uni_koblenz.jgralab.VertexFilter<V> filter);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InfixExpressionLeftOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionLeftOperand> getInfixExpressionLeftOperandIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InfixExpressionLeftOperand.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionLeftOperand> getInfixExpressionLeftOperandIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleVariableDeclarationInitializer or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationInitializer> getSingleVariableDeclarationInitializerIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleVariableDeclarationInitializer.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationInitializer> getSingleVariableDeclarationInitializerIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleMemberAnnotationValue or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationValue> getSingleMemberAnnotationValueIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleMemberAnnotationValue.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleMemberAnnotationValue> getSingleMemberAnnotationValueIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AssignmentRightHandSide or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentRightHandSide> getAssignmentRightHandSideIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AssignmentRightHandSide.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentRightHandSide> getAssignmentRightHandSideIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperMethodInvocationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationArguments> getSuperMethodInvocationArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperMethodInvocationArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodInvocationArguments> getSuperMethodInvocationArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MemberValuePairValue or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairValue> getMemberValuePairValueIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MemberValuePairValue.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MemberValuePairValue> getMemberValuePairValueIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayCreationDimensions or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationDimensions> getArrayCreationDimensionsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayCreationDimensions.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayCreationDimensions> getArrayCreationDimensionsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ConditionalExpressionElseExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionElseExpression> getConditionalExpressionElseExpressionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ConditionalExpressionElseExpression.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionElseExpression> getConditionalExpressionElseExpressionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AssignmentLeftHandSide or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentLeftHandSide> getAssignmentLeftHandSideIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AssignmentLeftHandSide.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssignmentLeftHandSide> getAssignmentLeftHandSideIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumConstantDeclarationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationArguments> getEnumConstantDeclarationArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumConstantDeclarationArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumConstantDeclarationArguments> getEnumConstantDeclarationArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperConstructorInvocationArgument or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationArgument> getSuperConstructorInvocationArgumentIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperConstructorInvocationArgument.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationArgument> getSuperConstructorInvocationArgumentIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type PrefixExpressionOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpressionOperand> getPrefixExpressionOperandIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type PrefixExpressionOperand.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.PrefixExpressionOperand> getPrefixExpressionOperandIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InfixExpressionRightOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionRightOperand> getInfixExpressionRightOperandIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InfixExpressionRightOperand.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionRightOperand> getInfixExpressionRightOperandIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeMemberDeclarationDefault or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationDefault> getAnnotationTypeMemberDeclarationDefaultIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeMemberDeclarationDefault.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationDefault> getAnnotationTypeMemberDeclarationDefaultIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AssertStatementMessage or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatementMessage> getAssertStatementMessageIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AssertStatementMessage.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AssertStatementMessage> getAssertStatementMessageIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayAccessIndex or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessIndex> getArrayAccessIndexIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayAccessIndex.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessIndex> getArrayAccessIndexIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ElementExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression> getElementExpressionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ElementExpression.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression> getElementExpressionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ConditionalExpressionThenExpression or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionThenExpression> getConditionalExpressionThenExpressionIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ConditionalExpressionThenExpression.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConditionalExpressionThenExpression> getConditionalExpressionThenExpressionIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ForStatementInitializers or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementInitializers> getForStatementInitializersIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ForStatementInitializers.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementInitializers> getForStatementInitializersIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayAccessArray or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessArray> getArrayAccessArrayIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayAccessArray.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayAccessArray> getArrayAccessArrayIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InfixExpressionExtendedOperands or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionExtendedOperands> getInfixExpressionExtendedOperandsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InfixExpressionExtendedOperands.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InfixExpressionExtendedOperands> getInfixExpressionExtendedOperandsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayInitializerExpressions or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializerExpressions> getArrayInitializerExpressionsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayInitializerExpressions.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayInitializerExpressions> getArrayInitializerExpressionsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ExpressionAccess1 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1> getExpressionAccess1Incidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ExpressionAccess1.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess1> getExpressionAccess1Incidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ExpressionAccess2 or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2> getExpressionAccess2Incidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ExpressionAccess2.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionAccess2> getExpressionAccess2Incidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InstanceofExpressionLeftOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionLeftOperand> getInstanceofExpressionLeftOperandIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InstanceofExpressionLeftOperand.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionLeftOperand> getInstanceofExpressionLeftOperandIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ConstructorInvocationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationArguments> getConstructorInvocationArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ConstructorInvocationArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationArguments> getConstructorInvocationArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type VariableDeclarationFragmentInitializer or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragmentInitializer> getVariableDeclarationFragmentInitializerIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type VariableDeclarationFragmentInitializer.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationFragmentInitializer> getVariableDeclarationFragmentInitializerIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodInvocationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocationArguments> getMethodInvocationArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodInvocationArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodInvocationArguments> getMethodInvocationArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ForStatementUpdaters or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementUpdaters> getForStatementUpdatersIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ForStatementUpdaters.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ForStatementUpdaters> getForStatementUpdatersIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ClassInstanceCreationArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationArguments> getClassInstanceCreationArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ClassInstanceCreationArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationArguments> getClassInstanceCreationArgumentsIncidences(EdgeDirection direction);
}
