/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Type extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element, de.uni_koblenz.jgralab.Vertex {

	public static final de.uni_koblenz.jgralab.schema.VertexClass VC = de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Java8Schema.instance().getGraphClass().getVertexClass("Type");

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Element getNextElement();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Node getNextNode();

	/**
	 * @return the next de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type vertex in the global vertex sequence
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Type getNextType();

	/**
	 * @return the first edge of class TypeMethodReferenceType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceType getFirstTypeMethodReferenceTypeIncidence();

	/**
	 * @return the first edge of class TypeMethodReferenceType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceType getFirstTypeMethodReferenceTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class TypeMethodReferenceArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceArguments getFirstTypeMethodReferenceArgumentsIncidence();

	/**
	 * @return the first edge of class TypeMethodReferenceArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceArguments getFirstTypeMethodReferenceArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodRefParameterType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterType getFirstMethodRefParameterTypeIncidence();

	/**
	 * @return the first edge of class MethodRefParameterType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterType getFirstMethodRefParameterTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ParameterizedTypeTypeArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeTypeArguments getFirstParameterizedTypeTypeArgumentsIncidence();

	/**
	 * @return the first edge of class ParameterizedTypeTypeArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeTypeArguments getFirstParameterizedTypeTypeArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class FieldDeclarationType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationType getFirstFieldDeclarationTypeIncidence();

	/**
	 * @return the first edge of class FieldDeclarationType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationType getFirstFieldDeclarationTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class EnumDeclarationSuperInterfaceTypes at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationSuperInterfaceTypes getFirstEnumDeclarationSuperInterfaceTypesIncidence();

	/**
	 * @return the first edge of class EnumDeclarationSuperInterfaceTypes at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationSuperInterfaceTypes getFirstEnumDeclarationSuperInterfaceTypesIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodDeclarationReceiverType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverType getFirstMethodDeclarationReceiverTypeIncidence();

	/**
	 * @return the first edge of class MethodDeclarationReceiverType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverType getFirstMethodDeclarationReceiverTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ExpressionMethodReferenceArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceArguments getFirstExpressionMethodReferenceArgumentsIncidence();

	/**
	 * @return the first edge of class ExpressionMethodReferenceArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceArguments getFirstExpressionMethodReferenceArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class CreationReferenceTypeArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceTypeArguments getFirstCreationReferenceTypeArgumentsIncidence();

	/**
	 * @return the first edge of class CreationReferenceTypeArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceTypeArguments getFirstCreationReferenceTypeArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class UnionTypeTypes at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionTypeTypes getFirstUnionTypeTypesIncidence();

	/**
	 * @return the first edge of class UnionTypeTypes at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionTypeTypes getFirstUnionTypeTypesIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class VariableDeclarationStatementType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementType getFirstVariableDeclarationStatementTypeIncidence();

	/**
	 * @return the first edge of class VariableDeclarationStatementType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementType getFirstVariableDeclarationStatementTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class CreationReferenceType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceType getFirstCreationReferenceTypeIncidence();

	/**
	 * @return the first edge of class CreationReferenceType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceType getFirstCreationReferenceTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class TypeLiteralType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteralType getFirstTypeLiteralTypeIncidence();

	/**
	 * @return the first edge of class TypeLiteralType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteralType getFirstTypeLiteralTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ConstructorInvocationTypeArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationTypeArguments getFirstConstructorInvocationTypeArgumentsIncidence();

	/**
	 * @return the first edge of class ConstructorInvocationTypeArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationTypeArguments getFirstConstructorInvocationTypeArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ClassInstanceCreationType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationType getFirstClassInstanceCreationTypeIncidence();

	/**
	 * @return the first edge of class ClassInstanceCreationType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationType getFirstClassInstanceCreationTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class TypeDeclarationSuperclassType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperclassType getFirstTypeDeclarationSuperclassTypeIncidence();

	/**
	 * @return the first edge of class TypeDeclarationSuperclassType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperclassType getFirstTypeDeclarationSuperclassTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SingleVariableDeclarationType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationType getFirstSingleVariableDeclarationTypeIncidence();

	/**
	 * @return the first edge of class SingleVariableDeclarationType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationType getFirstSingleVariableDeclarationTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class InstanceofExpressionRightOperand at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionRightOperand getFirstInstanceofExpressionRightOperandIncidence();

	/**
	 * @return the first edge of class InstanceofExpressionRightOperand at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionRightOperand getFirstInstanceofExpressionRightOperandIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class TypeAccess at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess getFirstTypeAccessIncidence();

	/**
	 * @return the first edge of class TypeAccess at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess getFirstTypeAccessIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodDeclarationReturnType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReturnType getFirstMethodDeclarationReturnTypeIncidence();

	/**
	 * @return the first edge of class MethodDeclarationReturnType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReturnType getFirstMethodDeclarationReturnTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class TypeParameterType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterType getFirstTypeParameterTypeIncidence();

	/**
	 * @return the first edge of class TypeParameterType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterType getFirstTypeParameterTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SuperMethodReferenceArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceArguments getFirstSuperMethodReferenceArgumentsIncidence();

	/**
	 * @return the first edge of class SuperMethodReferenceArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceArguments getFirstSuperMethodReferenceArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class ArrayTypeComponentType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayTypeComponentType getFirstArrayTypeComponentTypeIncidence();

	/**
	 * @return the first edge of class ArrayTypeComponentType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayTypeComponentType getFirstArrayTypeComponentTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class CastExpressionType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpressionType getFirstCastExpressionTypeIncidence();

	/**
	 * @return the first edge of class CastExpressionType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpressionType getFirstCastExpressionTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class MethodDeclarationThrownExceptions at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationThrownExceptions getFirstMethodDeclarationThrownExceptionsIncidence();

	/**
	 * @return the first edge of class MethodDeclarationThrownExceptions at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationThrownExceptions getFirstMethodDeclarationThrownExceptionsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class IntersectionTypeTypes at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionTypeTypes getFirstIntersectionTypeTypesIncidence();

	/**
	 * @return the first edge of class IntersectionTypeTypes at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionTypeTypes getFirstIntersectionTypeTypesIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class SuperConstructorInvocationTypeArguments at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationTypeArguments getFirstSuperConstructorInvocationTypeArgumentsIncidence();

	/**
	 * @return the first edge of class SuperConstructorInvocationTypeArguments at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationTypeArguments getFirstSuperConstructorInvocationTypeArgumentsIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class AnnotationTypeMemberDeclarationType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationType getFirstAnnotationTypeMemberDeclarationTypeIncidence();

	/**
	 * @return the first edge of class AnnotationTypeMemberDeclarationType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationType getFirstAnnotationTypeMemberDeclarationTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class VariableDeclarationExpressionType at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionType getFirstVariableDeclarationExpressionTypeIncidence();

	/**
	 * @return the first edge of class VariableDeclarationExpressionType at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionType getFirstVariableDeclarationExpressionTypeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class TypeDeclarationSuperInterfaceTypes at this vertex
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperInterfaceTypes getFirstTypeDeclarationSuperInterfaceTypesIncidence();

	/**
	 * @return the first edge of class TypeDeclarationSuperInterfaceTypes at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperInterfaceTypes getFirstTypeDeclarationSuperInterfaceTypesIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>access</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess add_access(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration vertex);
		/**
		 * removes all access adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration> remove_access();
		/**
		 * removes the given vertex as <code>access</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_access(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'access'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration> Iterable<V> get_access();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclaration> Iterable<V> get_access(de.uni_koblenz.jgralab.VertexFilter<V> filter);
		/**
		 * adds the given vertex as <code>expression</code> to this vertex, i.e. creates an
		 * <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression add_expression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex);
		/**
		 * removes all expression adjacences to all vertices by 
		 * deleting the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> remove_expression();
		/**
		 * removes the given vertex as <code>expression</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_expression(de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'expression'
		 *         (connected with a <code>de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ElementExpression</code> edge).
		 */
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> Iterable<V> get_expression();
		
		public <V extends de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.Expression> Iterable<V> get_expression(de.uni_koblenz.jgralab.VertexFilter<V> filter);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeMethodReferenceType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceType> getTypeMethodReferenceTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeMethodReferenceType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceType> getTypeMethodReferenceTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeMethodReferenceArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceArguments> getTypeMethodReferenceArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeMethodReferenceArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeMethodReferenceArguments> getTypeMethodReferenceArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodRefParameterType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterType> getMethodRefParameterTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodRefParameterType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodRefParameterType> getMethodRefParameterTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ParameterizedTypeTypeArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeTypeArguments> getParameterizedTypeTypeArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ParameterizedTypeTypeArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ParameterizedTypeTypeArguments> getParameterizedTypeTypeArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FieldDeclarationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationType> getFieldDeclarationTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type FieldDeclarationType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.FieldDeclarationType> getFieldDeclarationTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumDeclarationSuperInterfaceTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationSuperInterfaceTypes> getEnumDeclarationSuperInterfaceTypesIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type EnumDeclarationSuperInterfaceTypes.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.EnumDeclarationSuperInterfaceTypes> getEnumDeclarationSuperInterfaceTypesIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationReceiverType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverType> getMethodDeclarationReceiverTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationReceiverType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReceiverType> getMethodDeclarationReceiverTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ExpressionMethodReferenceArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceArguments> getExpressionMethodReferenceArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ExpressionMethodReferenceArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ExpressionMethodReferenceArguments> getExpressionMethodReferenceArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type CreationReferenceTypeArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceTypeArguments> getCreationReferenceTypeArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type CreationReferenceTypeArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceTypeArguments> getCreationReferenceTypeArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type UnionTypeTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionTypeTypes> getUnionTypeTypesIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type UnionTypeTypes.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.UnionTypeTypes> getUnionTypeTypesIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type VariableDeclarationStatementType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementType> getVariableDeclarationStatementTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type VariableDeclarationStatementType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationStatementType> getVariableDeclarationStatementTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type CreationReferenceType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceType> getCreationReferenceTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type CreationReferenceType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CreationReferenceType> getCreationReferenceTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeLiteralType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteralType> getTypeLiteralTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeLiteralType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeLiteralType> getTypeLiteralTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ConstructorInvocationTypeArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationTypeArguments> getConstructorInvocationTypeArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ConstructorInvocationTypeArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ConstructorInvocationTypeArguments> getConstructorInvocationTypeArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ClassInstanceCreationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationType> getClassInstanceCreationTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ClassInstanceCreationType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ClassInstanceCreationType> getClassInstanceCreationTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeDeclarationSuperclassType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperclassType> getTypeDeclarationSuperclassTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeDeclarationSuperclassType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperclassType> getTypeDeclarationSuperclassTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleVariableDeclarationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationType> getSingleVariableDeclarationTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SingleVariableDeclarationType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SingleVariableDeclarationType> getSingleVariableDeclarationTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InstanceofExpressionRightOperand or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionRightOperand> getInstanceofExpressionRightOperandIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type InstanceofExpressionRightOperand.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.InstanceofExpressionRightOperand> getInstanceofExpressionRightOperandIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeAccess or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess> getTypeAccessIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeAccess.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeAccess> getTypeAccessIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationReturnType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReturnType> getMethodDeclarationReturnTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationReturnType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationReturnType> getMethodDeclarationReturnTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeParameterType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterType> getTypeParameterTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeParameterType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeParameterType> getTypeParameterTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperMethodReferenceArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceArguments> getSuperMethodReferenceArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperMethodReferenceArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperMethodReferenceArguments> getSuperMethodReferenceArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayTypeComponentType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayTypeComponentType> getArrayTypeComponentTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type ArrayTypeComponentType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.ArrayTypeComponentType> getArrayTypeComponentTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type CastExpressionType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpressionType> getCastExpressionTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type CastExpressionType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.CastExpressionType> getCastExpressionTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationThrownExceptions or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationThrownExceptions> getMethodDeclarationThrownExceptionsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type MethodDeclarationThrownExceptions.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.MethodDeclarationThrownExceptions> getMethodDeclarationThrownExceptionsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IntersectionTypeTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionTypeTypes> getIntersectionTypeTypesIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type IntersectionTypeTypes.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.IntersectionTypeTypes> getIntersectionTypeTypesIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperConstructorInvocationTypeArguments or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationTypeArguments> getSuperConstructorInvocationTypeArgumentsIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type SuperConstructorInvocationTypeArguments.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.SuperConstructorInvocationTypeArguments> getSuperConstructorInvocationTypeArgumentsIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeMemberDeclarationType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationType> getAnnotationTypeMemberDeclarationTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type AnnotationTypeMemberDeclarationType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.AnnotationTypeMemberDeclarationType> getAnnotationTypeMemberDeclarationTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type VariableDeclarationExpressionType or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionType> getVariableDeclarationExpressionTypeIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type VariableDeclarationExpressionType.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.VariableDeclarationExpressionType> getVariableDeclarationExpressionTypeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeDeclarationSuperInterfaceTypes or subtypes.
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperInterfaceTypes> getTypeDeclarationSuperInterfaceTypesIncidences();
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type TypeDeclarationSuperInterfaceTypes.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_due.s3.jack2.backend.checkers.greqljavachecker.schema.java8.schema.TypeDeclarationSuperInterfaceTypes> getTypeDeclarationSuperInterfaceTypesIncidences(EdgeDirection direction);
}
